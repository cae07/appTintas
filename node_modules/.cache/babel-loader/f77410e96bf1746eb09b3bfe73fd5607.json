{"ast":null,"code":"const errorDWAlert = 'O total de área das portas e janelas deve ser no máximo 50% da área de parede';\nconst windowSquare = 24000;\nconst doorSquare = 15200;\n\nconst verifyFirstDoorWindow = (heightOne, widthtOne, firstWindow, firstDoor, navigate) => {\n  const firstWall = Math.ceil(Number(heightOne) * Number(widthtOne));\n  const wallWindowOne = Math.ceil(Number(firstWindow)) * windowSquare;\n  const wallDoorOne = Math.ceil(Number(firstDoor)) * doorSquare;\n  console.log();\n\n  if (wallWindowOne + wallDoorOne > firstWall / 2) {\n    alert(errorDWAlert);\n    return navigate('/firstWall');\n  }\n\n  return navigate('/secondWall');\n};\n\nconst verifySecondDoorWindow = (heightTwo, widthtTwo, secondWindow, secondDoor, navigate) => {\n  const secondWall = Math.ceil(Number(heightTwo) * Number(widthtTwo));\n  const wallWindowTwo = Math.ceil(Number(secondWindow)) * windowSquare;\n  const wallDoorTwo = Math.ceil(Number(secondDoor)) * doorSquare;\n\n  if (Number(wallWindowTwo) + Number(wallDoorTwo) > secondWall / 2) {\n    alert(errorDWAlert);\n    return navigate('/secondWall');\n  }\n\n  return navigate('/thirdWall');\n};\n\nconst verifyThirdDoorWindow = (heightThree, widthtThree, thirdWindow, thirdDoor, navigate) => {\n  const thirdWall = Math.ceil(Number(heightThree) * Number(widthtThree));\n  const wallWindowThree = Math.ceil(Number(thirdWindow)) * windowSquare;\n  const wallDoorThree = Math.ceil(Number(thirdDoor)) * doorSquare;\n\n  if (Number(wallWindowThree) + Number(wallDoorThree) > thirdWall / 2) {\n    alert(errorDWAlert);\n    return navigate('/thirdWall');\n  }\n\n  return navigate('/fourthWall');\n};\n\nconst verifyFourthDoorWindow = (heightFour, widthtFour, fourthWindow, fourthDoor, navigate) => {\n  const fourthWall = Math.ceil(Number(heightFour) * Number(widthtFour));\n  const wallWindowFour = Math.ceil(Number(fourthWindow)) * windowSquare;\n  const wallDoorFour = Math.ceil(Number(fourthDoor)) * doorSquare;\n\n  if (Number(wallWindowFour) + Number(wallDoorFour) > fourthWall / 2) {\n    alert(errorDWAlert);\n    return navigate('/fourthWall');\n  }\n\n  return navigate('/result');\n};\n\nexport { verifyFirstDoorWindow, verifySecondDoorWindow, verifyThirdDoorWindow, verifyFourthDoorWindow };","map":{"version":3,"sources":["/home/cae/digitalRepuclic/app-digital-republic/digital-republic/src/Helpers/VerifyDoorsAndWindows.jsx"],"names":["errorDWAlert","windowSquare","doorSquare","verifyFirstDoorWindow","heightOne","widthtOne","firstWindow","firstDoor","navigate","firstWall","Math","ceil","Number","wallWindowOne","wallDoorOne","console","log","alert","verifySecondDoorWindow","heightTwo","widthtTwo","secondWindow","secondDoor","secondWall","wallWindowTwo","wallDoorTwo","verifyThirdDoorWindow","heightThree","widthtThree","thirdWindow","thirdDoor","thirdWall","wallWindowThree","wallDoorThree","verifyFourthDoorWindow","heightFour","widthtFour","fourthWindow","fourthDoor","fourthWall","wallWindowFour","wallDoorFour"],"mappings":"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","sourcesContent":["const errorDWAlert = 'O total de área das portas e janelas deve ser no máximo 50% da área de parede';\nconst windowSquare = 24000;\nconst doorSquare = 15200;\n\nconst verifyFirstDoorWindow = (heightOne, widthtOne, firstWindow, firstDoor, navigate) => {\n  const firstWall = Math.ceil(Number(heightOne) * Number(widthtOne));\n  const wallWindowOne = Math.ceil(Number(firstWindow)) * windowSquare;\n  const wallDoorOne = Math.ceil(Number(firstDoor)) * doorSquare;\n\n  console.log();\n\n  if ((wallWindowOne + wallDoorOne) > (firstWall / 2)) {\n    alert(errorDWAlert);\n    return navigate('/firstWall');\n  }\n\n  return navigate('/secondWall');\n};\n\nconst verifySecondDoorWindow = (heightTwo, widthtTwo, secondWindow, secondDoor, navigate) => {\n  const secondWall = Math.ceil(Number(heightTwo) * Number(widthtTwo));\n  const wallWindowTwo = Math.ceil(Number(secondWindow)) * windowSquare;\n  const wallDoorTwo = Math.ceil(Number(secondDoor)) * doorSquare;\n\n  if ((Number(wallWindowTwo) + Number(wallDoorTwo)) > (secondWall / 2)) {\n    alert(errorDWAlert);\n    return navigate('/secondWall');\n  }\n\n  return navigate('/thirdWall');\n};\n\nconst verifyThirdDoorWindow = (heightThree, widthtThree, thirdWindow, thirdDoor, navigate) => {\n  const thirdWall = Math.ceil(Number(heightThree) * Number(widthtThree));\n  const wallWindowThree = Math.ceil(Number(thirdWindow)) * windowSquare;\n  const wallDoorThree = Math.ceil(Number(thirdDoor)) * doorSquare;\n\n  if ((Number(wallWindowThree) + Number(wallDoorThree)) > (thirdWall / 2)) {\n    alert(errorDWAlert);\n    return navigate('/thirdWall');\n  }\n\n  return navigate('/fourthWall');\n};\n\nconst verifyFourthDoorWindow = (heightFour, widthtFour, fourthWindow, fourthDoor, navigate) => {\n  const fourthWall = Math.ceil(Number(heightFour) * Number(widthtFour));\n  const wallWindowFour = Math.ceil(Number(fourthWindow)) * windowSquare;\n  const wallDoorFour = Math.ceil(Number(fourthDoor)) * doorSquare;\n\n  if ((Number(wallWindowFour) + Number(wallDoorFour)) > (fourthWall / 2)) {\n    alert(errorDWAlert);\n    return navigate('/fourthWall');\n  }\n\n  return navigate('/result');\n};\n\nexport {\n  verifyFirstDoorWindow,\n  verifySecondDoorWindow,\n  verifyThirdDoorWindow,\n  verifyFourthDoorWindow,\n};\n"]},"metadata":{},"sourceType":"module"}