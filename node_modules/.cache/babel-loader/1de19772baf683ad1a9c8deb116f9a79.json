{"ast":null,"code":"var _s = $RefreshSig$();\n\n// Arquivo para funçoes de verificação de tamanho das paredes\n// import { useContext } from 'react';\n// import myContext from '../Context/myContext';\nimport { VerifyFirstDoorWindow, VerifySecondDoorWindow, VerifyThirdDoorWindow, VerifyFourthDoorWindow } from './VerifyDoorsAndWindows';\nimport { useContext } from \"react\";\nimport myContext from \"../Context/myContext\";\nconst maximum = 150000;\nconst minimun = 10000;\nconst maximumAlert = 'A parede não pode ter mais que 15 metros quadrados.';\nconst minimumAlert = 'A parede não pode ter menos que 1 metro quadrado.';\n\nconst VerifyFirstWallMesures = (heightOne, widthtOne, firstWindow, firstDoor, navigate) => {\n  _s();\n\n  const {\n    setTextModal\n  } = useContext(myContext);\n  const firstWall = Math.ceil(Number(heightOne) * Number(widthtOne));\n\n  if (firstWall > maximum) {\n    setTextModal(maximumAlert); // return navigate('/firstWall');\n\n    return false;\n  }\n\n  if (firstWall < minimun) {\n    setTextModal(minimumAlert); // return navigate('/firstWall');\n\n    return false;\n  }\n\n  VerifyFirstDoorWindow(heightOne, widthtOne, firstWindow, firstDoor, navigate);\n};\n\n_s(VerifyFirstWallMesures, \"dcHMWFCuzCX381wRglsy6Hg1CEo=\");\n\n_c = VerifyFirstWallMesures;\n\nconst VerifySecondWallMesures = (heightTwo, widthtTwo, secondWindow, secondDoor, navigate) => {\n  const secondWall = Math.ceil(Number(heightTwo) * Number(widthtTwo));\n\n  if (secondWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/secondWall');\n  }\n\n  if (secondWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/secondWall');\n  }\n\n  VerifySecondDoorWindow(heightTwo, widthtTwo, secondWindow, secondDoor, navigate);\n};\n\n_c2 = VerifySecondWallMesures;\n\nconst VerifyThirdWallMesures = (heightThree, widthtThree, thirdWindow, thirdDoor, navigate) => {\n  const thirdWall = Math.ceil(Number(heightThree) * Number(widthtThree));\n\n  if (thirdWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/thirdWall');\n  }\n\n  if (thirdWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/thirdWall');\n  }\n\n  VerifyThirdDoorWindow(heightThree, widthtThree, thirdWindow, thirdDoor, navigate);\n};\n\n_c3 = VerifyThirdWallMesures;\n\nconst VerifyFourthWallMesures = (heightFour, widthtFour, fourthWindow, fourthDoor, navigate) => {\n  const fourthWall = Math.ceil(Number(heightFour) * Number(widthtFour));\n\n  if (fourthWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/fourthWall');\n  }\n\n  if (fourthWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/fourthWall');\n  }\n\n  VerifyFourthDoorWindow(heightFour, widthtFour, fourthWindow, fourthDoor, navigate);\n};\n\n_c4 = VerifyFourthWallMesures;\nexport { VerifyFirstWallMesures, VerifySecondWallMesures, VerifyThirdWallMesures, VerifyFourthWallMesures };\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"VerifyFirstWallMesures\");\n$RefreshReg$(_c2, \"VerifySecondWallMesures\");\n$RefreshReg$(_c3, \"VerifyThirdWallMesures\");\n$RefreshReg$(_c4, \"VerifyFourthWallMesures\");","map":{"version":3,"sources":["/home/cae/appTintas/src/Helpers/VerifyMesures.jsx"],"names":["VerifyFirstDoorWindow","VerifySecondDoorWindow","VerifyThirdDoorWindow","VerifyFourthDoorWindow","useContext","myContext","maximum","minimun","maximumAlert","minimumAlert","VerifyFirstWallMesures","heightOne","widthtOne","firstWindow","firstDoor","navigate","setTextModal","firstWall","Math","ceil","Number","VerifySecondWallMesures","heightTwo","widthtTwo","secondWindow","secondDoor","secondWall","alert","VerifyThirdWallMesures","heightThree","widthtThree","thirdWindow","thirdDoor","thirdWall","VerifyFourthWallMesures","heightFour","widthtFour","fourthWindow","fourthDoor","fourthWall"],"mappings":"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","sourcesContent":["// Arquivo para funçoes de verificação de tamanho das paredes\n// import { useContext } from 'react';\n// import myContext from '../Context/myContext';\nimport {\n  VerifyFirstDoorWindow,\n  VerifySecondDoorWindow,\n  VerifyThirdDoorWindow,\n  VerifyFourthDoorWindow,\n} from './VerifyDoorsAndWindows';\n\nimport { useContext } from \"react\";\nimport myContext from \"../Context/myContext\";\n\nconst maximum = 150000;\nconst minimun = 10000;\nconst maximumAlert = 'A parede não pode ter mais que 15 metros quadrados.'\nconst minimumAlert = 'A parede não pode ter menos que 1 metro quadrado.'\n\nconst VerifyFirstWallMesures = (heightOne, widthtOne, firstWindow, firstDoor, navigate) => {\n  const { setTextModal } = useContext(myContext);\n\n  const firstWall = Math.ceil(Number(heightOne) * Number(widthtOne));\n  if (firstWall > maximum) {\n    setTextModal(maximumAlert);\n    // return navigate('/firstWall');\n    return false;\n  }\n  if (firstWall < minimun) {\n    setTextModal(minimumAlert);\n    // return navigate('/firstWall');\n    return false;\n  }\n\n  VerifyFirstDoorWindow(heightOne, widthtOne, firstWindow, firstDoor, navigate);\n};\n\nconst VerifySecondWallMesures = (heightTwo, widthtTwo, secondWindow, secondDoor, navigate) => {\n  const secondWall = Math.ceil(Number(heightTwo) * Number(widthtTwo));\n  if (secondWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/secondWall');\n  }\n  if (secondWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/secondWall');\n  }\n\n  VerifySecondDoorWindow(heightTwo, widthtTwo, secondWindow, secondDoor, navigate);\n};\n\nconst VerifyThirdWallMesures = (heightThree, widthtThree, thirdWindow, thirdDoor, navigate) => {\n  const thirdWall = Math.ceil(Number(heightThree) * Number(widthtThree));\n  if (thirdWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/thirdWall');\n  }\n  if (thirdWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/thirdWall');\n  }\n\n  VerifyThirdDoorWindow(heightThree, widthtThree, thirdWindow, thirdDoor, navigate);\n};\n\nconst VerifyFourthWallMesures = (heightFour, widthtFour, fourthWindow, fourthDoor, navigate) => {\n  const fourthWall = Math.ceil(Number(heightFour) * Number(widthtFour));\n  if (fourthWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/fourthWall');\n  }\n  if (fourthWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/fourthWall');\n  }\n\n  VerifyFourthDoorWindow(heightFour, widthtFour, fourthWindow, fourthDoor, navigate);\n};\n\nexport {\n  VerifyFirstWallMesures,\n  VerifySecondWallMesures,\n  VerifyThirdWallMesures,\n  VerifyFourthWallMesures,\n};\n"]},"metadata":{},"sourceType":"module"}