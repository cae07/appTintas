{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext } from \"react\";\nimport myContext from \"../Context/myContext\";\nconst errorDWAlert = 'O total de área das portas e janelas deve ser no máximo 50% da área de parede';\nconst errorWallSize = 'A altura da parede que possui portas deve ser de no mínimo 220cm.';\nconst windowSquare = 24000;\nconst doorSquare = 15200;\nconst minmunWallWithDoor = 220;\n\nconst VerifyFirstDoorWindow = (heightOne, widthtOne, firstWindow, firstDoor, navigate) => {\n  _s();\n\n  const {\n    setTextModal\n  } = useContext(myContext);\n  const firstWall = Math.ceil(Number(heightOne) * Number(widthtOne));\n  const wallWindowOne = Math.ceil(Number(firstWindow)) * windowSquare;\n  const wallDoorOne = Math.ceil(Number(firstDoor)) * doorSquare;\n\n  if (firstDoor > 0) {\n    if (heightOne < minmunWallWithDoor) {\n      setTextModal(errorWallSize);\n      return false;\n    }\n  }\n\n  if (wallWindowOne + wallDoorOne > firstWall / 2) {\n    return false;\n  }\n\n  return navigate('/secondWall');\n};\n\n_s(VerifyFirstDoorWindow, \"dcHMWFCuzCX381wRglsy6Hg1CEo=\");\n\n_c = VerifyFirstDoorWindow;\n\nconst VerifySecondDoorWindow = (heightTwo, widthtTwo, secondWindow, secondDoor, navigate) => {\n  const secondWall = Math.ceil(Number(heightTwo) * Number(widthtTwo));\n  const wallWindowTwo = Math.ceil(Number(secondWindow)) * windowSquare;\n  const wallDoorTwo = Math.ceil(Number(secondDoor)) * doorSquare;\n\n  if (secondDoor > 0) {\n    if (heightTwo < minmunWallWithDoor) {\n      alert(errorWallSize);\n      return navigate('/secondWall');\n    }\n  }\n\n  if (wallWindowTwo + wallDoorTwo > secondWall / 2) {\n    alert(errorDWAlert);\n    return navigate('/secondWall');\n  }\n\n  return navigate('/thirdWall');\n};\n\n_c2 = VerifySecondDoorWindow;\n\nconst VerifyThirdDoorWindow = (heightThree, widthtThree, thirdWindow, thirdDoor, navigate) => {\n  const thirdWall = Math.ceil(Number(heightThree) * Number(widthtThree));\n  const wallWindowThree = Math.ceil(Number(thirdWindow)) * windowSquare;\n  const wallDoorThree = Math.ceil(Number(thirdDoor)) * doorSquare;\n\n  if (thirdDoor > 0) {\n    if (heightThree < minmunWallWithDoor) {\n      alert(errorWallSize);\n      return navigate('/thirdWall');\n    }\n  }\n\n  if (wallWindowThree + wallDoorThree > thirdWall / 2) {\n    alert(errorDWAlert);\n    return navigate('/thirdWall');\n  }\n\n  return navigate('/fourthWall');\n};\n\n_c3 = VerifyThirdDoorWindow;\n\nconst VerifyFourthDoorWindow = (heightFour, widthtFour, fourthWindow, fourthDoor, navigate) => {\n  const fourthWall = Math.ceil(Number(heightFour) * Number(widthtFour));\n  const wallWindowFour = Math.ceil(Number(fourthWindow)) * windowSquare;\n  const wallDoorFour = Math.ceil(Number(fourthDoor)) * doorSquare;\n\n  if (fourthDoor > 0) {\n    if (heightFour < minmunWallWithDoor) {\n      alert(errorWallSize);\n      return navigate('/fourthWall');\n    }\n  }\n\n  if (wallWindowFour + wallDoorFour > fourthWall / 2) {\n    alert(errorDWAlert);\n    return navigate('/fourthWall');\n  }\n\n  return navigate('/result');\n};\n\n_c4 = VerifyFourthDoorWindow;\nexport { VerifyFirstDoorWindow, VerifySecondDoorWindow, VerifyThirdDoorWindow, VerifyFourthDoorWindow };\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"VerifyFirstDoorWindow\");\n$RefreshReg$(_c2, \"VerifySecondDoorWindow\");\n$RefreshReg$(_c3, \"VerifyThirdDoorWindow\");\n$RefreshReg$(_c4, \"VerifyFourthDoorWindow\");","map":{"version":3,"sources":["/home/cae/appTintas/src/Helpers/VerifyDoorsAndWindows.jsx"],"names":["useContext","myContext","errorDWAlert","errorWallSize","windowSquare","doorSquare","minmunWallWithDoor","VerifyFirstDoorWindow","heightOne","widthtOne","firstWindow","firstDoor","navigate","setTextModal","firstWall","Math","ceil","Number","wallWindowOne","wallDoorOne","VerifySecondDoorWindow","heightTwo","widthtTwo","secondWindow","secondDoor","secondWall","wallWindowTwo","wallDoorTwo","alert","VerifyThirdDoorWindow","heightThree","widthtThree","thirdWindow","thirdDoor","thirdWall","wallWindowThree","wallDoorThree","VerifyFourthDoorWindow","heightFour","widthtFour","fourthWindow","fourthDoor","fourthWall","wallWindowFour","wallDoorFour"],"mappings":"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","sourcesContent":["import { useContext } from \"react\";\nimport myContext from \"../Context/myContext\";\n\nconst errorDWAlert = 'O total de área das portas e janelas deve ser no máximo 50% da área de parede';\nconst errorWallSize = 'A altura da parede que possui portas deve ser de no mínimo 220cm.'\nconst windowSquare = 24000;\nconst doorSquare = 15200;\nconst minmunWallWithDoor = 220;\n\nconst VerifyFirstDoorWindow = (heightOne, widthtOne, firstWindow, firstDoor, navigate) => {\n  const { setTextModal } = useContext(myContext);\n\n  const firstWall = Math.ceil(Number(heightOne) * Number(widthtOne));\n  const wallWindowOne = Math.ceil(Number(firstWindow)) * windowSquare;\n  const wallDoorOne = Math.ceil(Number(firstDoor)) * doorSquare;\n\n  if (firstDoor > 0) {\n    if (heightOne < minmunWallWithDoor) {\n      setTextModal(errorWallSize);\n      return false;\n    }\n  }\n\n  if ((wallWindowOne + wallDoorOne) > (firstWall / 2)) {\n    return false\n  }\n\n  return navigate('/secondWall');\n};\n\nconst VerifySecondDoorWindow = (heightTwo, widthtTwo, secondWindow, secondDoor, navigate) => {\n  const secondWall = Math.ceil(Number(heightTwo) * Number(widthtTwo));\n  const wallWindowTwo = Math.ceil(Number(secondWindow)) * windowSquare;\n  const wallDoorTwo = Math.ceil(Number(secondDoor)) * doorSquare;\n\n  if (secondDoor > 0) {\n    if (heightTwo < minmunWallWithDoor) {\n      alert(errorWallSize);\n      return navigate('/secondWall');\n    }\n  }\n\n  if ((wallWindowTwo + wallDoorTwo) > (secondWall / 2)) {\n    alert(errorDWAlert);\n    return navigate('/secondWall');\n  }\n\n  return navigate('/thirdWall');\n};\n\nconst VerifyThirdDoorWindow = (heightThree, widthtThree, thirdWindow, thirdDoor, navigate) => {\n  const thirdWall = Math.ceil(Number(heightThree) * Number(widthtThree));\n  const wallWindowThree = Math.ceil(Number(thirdWindow)) * windowSquare;\n  const wallDoorThree = Math.ceil(Number(thirdDoor)) * doorSquare;\n\n  if (thirdDoor > 0) {\n    if (heightThree < minmunWallWithDoor) {\n      alert(errorWallSize);\n      return navigate('/thirdWall');\n    }\n  }\n\n  if ((wallWindowThree + wallDoorThree) > (thirdWall / 2)) {\n    alert(errorDWAlert);\n    return navigate('/thirdWall');\n  }\n\n  return navigate('/fourthWall');\n};\n\nconst VerifyFourthDoorWindow = (heightFour, widthtFour, fourthWindow, fourthDoor, navigate) => {\n  const fourthWall = Math.ceil(Number(heightFour) * Number(widthtFour));\n  const wallWindowFour = Math.ceil(Number(fourthWindow)) * windowSquare;\n  const wallDoorFour = Math.ceil(Number(fourthDoor)) * doorSquare;\n\n  if (fourthDoor > 0) {\n    if (heightFour < minmunWallWithDoor) {\n      alert(errorWallSize);\n      return navigate('/fourthWall');\n    }\n  }\n\n  if ((wallWindowFour + wallDoorFour) > (fourthWall / 2)) {\n    alert(errorDWAlert);\n    return navigate('/fourthWall');\n  }\n\n  return navigate('/result');\n};\n\nexport {\n  VerifyFirstDoorWindow,\n  VerifySecondDoorWindow,\n  VerifyThirdDoorWindow,\n  VerifyFourthDoorWindow,\n};\n"]},"metadata":{},"sourceType":"module"}