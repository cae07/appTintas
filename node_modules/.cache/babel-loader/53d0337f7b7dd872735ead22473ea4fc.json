{"ast":null,"code":"var _jsxFileName = \"/home/cae/appTintas/src/Pages/ResultPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport myContext from '../Context/myContext';\nimport '../CSS/results.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ResultPage() {\n  _s();\n\n  const {\n    name,\n    heightOne,\n    heightTwo,\n    heightThree,\n    heightFour,\n    widthtOne,\n    widthtTwo,\n    widthtThree,\n    widthtFour,\n    firstWindow,\n    secondWindow,\n    thirdWindow,\n    fourthWindow,\n    firstDoor,\n    secondDoor,\n    thirdDoor,\n    fourthDoor\n  } = useContext(myContext);\n  const [totalSquare, setTotalSquare] = useState(0);\n  const [allCans, setAllCans] = useState([]);\n  const navigate = useNavigate();\n  const windowSquare = 2.4;\n  const doorSquare = 1.52;\n  const squareMeters = 10000;\n\n  const VerifyQuantity = allCans => {\n    const count = {};\n    allCans.forEach(tin => {\n      if (count[tin]) {\n        count[tin] += 1;\n        return;\n      }\n\n      count[tin] = 1;\n    });\n    return count;\n  }; // useEffect para calcular quantos metros quadrados de parede existe para pintura\n\n\n  useEffect(() => {\n    const wallOne = Number(heightOne) * Number(widthtOne) / squareMeters;\n    const wallTwo = Number(heightTwo) * Number(widthtTwo) / squareMeters;\n    const wallThree = Number(heightThree) * Number(widthtThree) / squareMeters;\n    const wallFour = Number(heightFour) * Number(widthtFour) / squareMeters; // mantive a lata de 18 litros, mas baseado nas regras de negócio, não é necessário\n\n    const paintCansSize = [18, 3.6, 2.5, 0.5];\n    const sumAllWindows = (Number(firstWindow) + Number(secondWindow) + Number(thirdWindow) + Number(fourthWindow)) * windowSquare;\n    const sumAllDoors = (Number(firstDoor) + Number(secondDoor) + Number(thirdDoor) + Number(fourthDoor)) * doorSquare;\n    const squareTotal = (wallOne + wallTwo + wallThree + wallFour - (sumAllWindows + sumAllDoors)).toFixed(2);\n\n    const VerifyTotalCans = squareTotal => {\n      const totalCans = [];\n      let totalPaint = squareTotal / 5;\n      paintCansSize.forEach(tin => {\n        // HOF para definir tamanhos de latas\n        if (tin < totalPaint) {\n          totalPaint -= tin;\n          totalCans.push(tin);\n        }\n\n        return null;\n      });\n\n      if (totalPaint > 0) {\n        // verificação se ainda existem partes sem pintar\n        totalCans.push(0.5);\n      }\n\n      return totalCans;\n    };\n\n    const finalAnswer = squareTotal => {\n      setTotalSquare(squareTotal); // seta a informação para mostrar na tela;\n\n      const totalPaint = VerifyTotalCans(squareTotal);\n      const separatedCans = VerifyQuantity(totalPaint);\n      const keys = Object.entries(separatedCans);\n      setAllCans(keys);\n    };\n\n    finalAnswer(squareTotal);\n  }, [firstDoor, firstWindow, fourthDoor, fourthWindow, heightFour, heightOne, heightThree, heightTwo, secondDoor, secondWindow, thirdDoor, thirdWindow, widthtFour, widthtOne, widthtThree, widthtTwo]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"results-container page-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Ol\\xE1 \", name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Voc\\xEA precisa de\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), allCans.map((tin, index) => {\n        if (tin[1] === 1) {\n          return /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [tin[1], \" lata de \", tin[0], \"l\"]\n          }, `${tin[0]}-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 20\n          }, this);\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [tin[1], \" latas de \", tin[0], \"l\"]\n        }, `${tin[0]}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 18\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"para colorir \", totalSquare, \"m\\xB2.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buy-button\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"buton\",\n          onClick: () => navigate('/contato'),\n          children: \"COMPRAR\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ResultPage, \"UpC0OYtvnN9pI6Z92zxPXTDo0b4=\", false, function () {\n  return [useNavigate];\n});\n\n_c = ResultPage;\nexport default ResultPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResultPage\");","map":{"version":3,"sources":["/home/cae/appTintas/src/Pages/ResultPage.jsx"],"names":["React","useContext","useEffect","useState","useNavigate","myContext","ResultPage","name","heightOne","heightTwo","heightThree","heightFour","widthtOne","widthtTwo","widthtThree","widthtFour","firstWindow","secondWindow","thirdWindow","fourthWindow","firstDoor","secondDoor","thirdDoor","fourthDoor","totalSquare","setTotalSquare","allCans","setAllCans","navigate","windowSquare","doorSquare","squareMeters","VerifyQuantity","count","forEach","tin","wallOne","Number","wallTwo","wallThree","wallFour","paintCansSize","sumAllWindows","sumAllDoors","squareTotal","toFixed","VerifyTotalCans","totalCans","totalPaint","push","finalAnswer","separatedCans","keys","Object","entries","map","index"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport myContext from '../Context/myContext';\nimport '../CSS/results.css';\n\nfunction ResultPage() {\n  const {\n    name,\n    heightOne,\n    heightTwo,\n    heightThree,\n    heightFour,\n    widthtOne,\n    widthtTwo,\n    widthtThree,\n    widthtFour,\n    firstWindow,\n    secondWindow,\n    thirdWindow,\n    fourthWindow,\n    firstDoor,\n    secondDoor,\n    thirdDoor,\n    fourthDoor,\n  } = useContext(myContext);\n\n  const [totalSquare, setTotalSquare] = useState(0);\n  const [allCans, setAllCans] = useState([]);\n  const navigate = useNavigate();\n\n  const windowSquare = 2.4;\n  const doorSquare = 1.52;\n  const squareMeters = 10000;  \n\n  const VerifyQuantity = (allCans) => {\n    const count = {};\n\n    allCans.forEach((tin) => {\n      if (count[tin]) {\n        count[tin] += 1;\n        return;\n      }\n      count[tin] = 1; \n    });\n\n    return count;\n  };\n\n  // useEffect para calcular quantos metros quadrados de parede existe para pintura\n  useEffect(() => {\n    const wallOne = (Number(heightOne) * Number(widthtOne)) / squareMeters;\n    const wallTwo = (Number(heightTwo) * Number(widthtTwo)) / squareMeters;\n    const wallThree = (Number(heightThree) * Number(widthtThree)) / squareMeters;\n    const wallFour = (Number(heightFour) * Number(widthtFour)) / squareMeters;\n    // mantive a lata de 18 litros, mas baseado nas regras de negócio, não é necessário\n    const paintCansSize = [18, 3.6, 2.5, 0.5];\n\n    const sumAllWindows = (\n      Number(firstWindow) + Number(secondWindow) + Number(thirdWindow) + Number(fourthWindow)\n    ) * windowSquare;\n\n    const sumAllDoors = (\n      Number(firstDoor) + Number(secondDoor) + Number(thirdDoor) + Number(fourthDoor)\n    ) * doorSquare;\n\n    const squareTotal = (\n      (wallOne + wallTwo + wallThree + wallFour) - (sumAllWindows + sumAllDoors)\n    ).toFixed(2);\n\n    const VerifyTotalCans = (squareTotal) => {\n      const totalCans = [];\n      let totalPaint = squareTotal / 5;\n  \n      paintCansSize.forEach((tin) => { // HOF para definir tamanhos de latas\n        if (tin < totalPaint) {\n          totalPaint -= tin;\n          totalCans.push(tin);\n        }\n        return null;\n      });\n      \n      if (totalPaint > 0) { // verificação se ainda existem partes sem pintar\n        totalCans.push(0.5);\n      }\n      return totalCans;\n    };\n\n    const finalAnswer = (squareTotal) => {\n      setTotalSquare(squareTotal); // seta a informação para mostrar na tela;\n      const totalPaint = VerifyTotalCans(squareTotal);\n  \n      const separatedCans = VerifyQuantity(totalPaint);\n      const keys = Object.entries(separatedCans);\n      setAllCans(keys);\n    };\n    finalAnswer(squareTotal);    \n  }, [firstDoor, firstWindow, fourthDoor, fourthWindow, heightFour, heightOne, heightThree, heightTwo, secondDoor, secondWindow, thirdDoor, thirdWindow, widthtFour, widthtOne, widthtThree, widthtTwo]);\n\n\n  return (\n    <section className=\"results-container page-container\">\n      <div className=\"results\">\n        <h1>Olá {name}</h1>\n        <h1>Você precisa de</h1>\n        {allCans.map((tin, index) => {\n          if (tin[1] === 1) {\n            return <h2 key={ `${tin[0]}-${index}` }>{tin[1]} lata de {tin[0]}l</h2>\n          }\n          return <h2 key={ `${tin[0]}-${index}` }>{tin[1]} latas de {tin[0]}l</h2>\n        })}\n        <h1>para colorir {totalSquare}m².</h1>\n        <div className=\"buy-button\">\n          <button\n            type=\"buton\"\n            onClick={ () => navigate('/contato') }\n          >\n            COMPRAR\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default ResultPage;\n"]},"metadata":{},"sourceType":"module"}