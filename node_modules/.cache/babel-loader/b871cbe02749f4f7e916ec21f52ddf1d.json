{"ast":null,"code":"const errorDWAlert = 'O total de área das portas e janelas deve ser no máximo 50% da área de parede';\nconst errorWallSize = 'A altura da parede que possui portas deve ser de no mínimo 220cm.';\nconst windowSquare = 24000;\nconst doorSquare = 15200;\nconst minmunWallWithDoor = 220;\n\nconst verifyFirstDoorWindow = (heightOne, widthtOne, firstWindow, firstDoor, navigate) => {\n  const firstWall = Math.ceil(Number(heightOne) * Number(widthtOne));\n  const wallWindowOne = Math.ceil(Number(firstWindow)) * windowSquare;\n  const wallDoorOne = Math.ceil(Number(firstDoor)) * doorSquare;\n\n  if (firstDoor > 0) {\n    if (heightOne < minmunWallWithDoor) {\n      alert(errorWallSize);\n      return navigate('/firstWall');\n    }\n  }\n\n  if (wallWindowOne + wallDoorOne > firstWall / 2) {\n    alert(errorDWAlert);\n    return navigate('/firstWall');\n  }\n\n  return navigate('/secondWall');\n};\n\nconst verifySecondDoorWindow = (heightTwo, widthtTwo, secondWindow, secondDoor, navigate) => {\n  const secondWall = Math.ceil(Number(heightTwo) * Number(widthtTwo));\n  const wallWindowTwo = Math.ceil(Number(secondWindow)) * windowSquare;\n  const wallDoorTwo = Math.ceil(Number(secondDoor)) * doorSquare;\n\n  if (wallWindowTwo + wallDoorTwo > secondWall / 2) {\n    alert(errorDWAlert);\n    return navigate('/secondWall');\n  }\n\n  return navigate('/thirdWall');\n};\n\nconst verifyThirdDoorWindow = (heightThree, widthtThree, thirdWindow, thirdDoor, navigate) => {\n  const thirdWall = Math.ceil(Number(heightThree) * Number(widthtThree));\n  const wallWindowThree = Math.ceil(Number(thirdWindow)) * windowSquare;\n  const wallDoorThree = Math.ceil(Number(thirdDoor)) * doorSquare;\n\n  if (wallWindowThree + wallDoorThree > thirdWall / 2) {\n    alert(errorDWAlert);\n    return navigate('/thirdWall');\n  }\n\n  return navigate('/fourthWall');\n};\n\nconst verifyFourthDoorWindow = (heightFour, widthtFour, fourthWindow, fourthDoor, navigate) => {\n  const fourthWall = Math.ceil(Number(heightFour) * Number(widthtFour));\n  const wallWindowFour = Math.ceil(Number(fourthWindow)) * windowSquare;\n  const wallDoorFour = Math.ceil(Number(fourthDoor)) * doorSquare;\n\n  if (wallWindowFour + wallDoorFour > fourthWall / 2) {\n    alert(errorDWAlert);\n    return navigate('/fourthWall');\n  }\n\n  return navigate('/result');\n};\n\nexport { verifyFirstDoorWindow, verifySecondDoorWindow, verifyThirdDoorWindow, verifyFourthDoorWindow };","map":{"version":3,"sources":["/home/cae/digitalRepuclic/app-digital-republic/digital-republic/src/Helpers/VerifyDoorsAndWindows.jsx"],"names":["errorDWAlert","errorWallSize","windowSquare","doorSquare","minmunWallWithDoor","verifyFirstDoorWindow","heightOne","widthtOne","firstWindow","firstDoor","navigate","firstWall","Math","ceil","Number","wallWindowOne","wallDoorOne","alert","verifySecondDoorWindow","heightTwo","widthtTwo","secondWindow","secondDoor","secondWall","wallWindowTwo","wallDoorTwo","verifyThirdDoorWindow","heightThree","widthtThree","thirdWindow","thirdDoor","thirdWall","wallWindowThree","wallDoorThree","verifyFourthDoorWindow","heightFour","widthtFour","fourthWindow","fourthDoor","fourthWall","wallWindowFour","wallDoorFour"],"mappings":"AAAA,MAAMA,YAAY,GAAG,+EAArB;AACA,MAAMC,aAAa,GAAG,mEAAtB;AACA,MAAMC,YAAY,GAAG,KAArB;AACA,MAAMC,UAAU,GAAG,KAAnB;AACA,MAAMC,kBAAkB,GAAG,GAA3B;;AAEA,MAAMC,qBAAqB,GAAG,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,WAAvB,EAAoCC,SAApC,EAA+CC,QAA/C,KAA4D;AACxF,QAAMC,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUC,MAAM,CAACR,SAAD,CAAN,GAAoBQ,MAAM,CAACP,SAAD,CAApC,CAAlB;AACA,QAAMQ,aAAa,GAAGH,IAAI,CAACC,IAAL,CAAUC,MAAM,CAACN,WAAD,CAAhB,IAAiCN,YAAvD;AACA,QAAMc,WAAW,GAAGJ,IAAI,CAACC,IAAL,CAAUC,MAAM,CAACL,SAAD,CAAhB,IAA+BN,UAAnD;;AAEA,MAAIM,SAAS,GAAG,CAAhB,EAAmB;AACjB,QAAIH,SAAS,GAAGF,kBAAhB,EAAoC;AAClCa,MAAAA,KAAK,CAAChB,aAAD,CAAL;AACA,aAAOS,QAAQ,CAAC,YAAD,CAAf;AACD;AACF;;AAED,MAAKK,aAAa,GAAGC,WAAjB,GAAiCL,SAAS,GAAG,CAAjD,EAAqD;AACnDM,IAAAA,KAAK,CAACjB,YAAD,CAAL;AACA,WAAOU,QAAQ,CAAC,YAAD,CAAf;AACD;;AAED,SAAOA,QAAQ,CAAC,aAAD,CAAf;AACD,CAlBD;;AAoBA,MAAMQ,sBAAsB,GAAG,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,YAAvB,EAAqCC,UAArC,EAAiDZ,QAAjD,KAA8D;AAC3F,QAAMa,UAAU,GAAGX,IAAI,CAACC,IAAL,CAAUC,MAAM,CAACK,SAAD,CAAN,GAAoBL,MAAM,CAACM,SAAD,CAApC,CAAnB;AACA,QAAMI,aAAa,GAAGZ,IAAI,CAACC,IAAL,CAAUC,MAAM,CAACO,YAAD,CAAhB,IAAkCnB,YAAxD;AACA,QAAMuB,WAAW,GAAGb,IAAI,CAACC,IAAL,CAAUC,MAAM,CAACQ,UAAD,CAAhB,IAAgCnB,UAApD;;AAEA,MAAKqB,aAAa,GAAGC,WAAjB,GAAiCF,UAAU,GAAG,CAAlD,EAAsD;AACpDN,IAAAA,KAAK,CAACjB,YAAD,CAAL;AACA,WAAOU,QAAQ,CAAC,aAAD,CAAf;AACD;;AAED,SAAOA,QAAQ,CAAC,YAAD,CAAf;AACD,CAXD;;AAaA,MAAMgB,qBAAqB,GAAG,CAACC,WAAD,EAAcC,WAAd,EAA2BC,WAA3B,EAAwCC,SAAxC,EAAmDpB,QAAnD,KAAgE;AAC5F,QAAMqB,SAAS,GAAGnB,IAAI,CAACC,IAAL,CAAUC,MAAM,CAACa,WAAD,CAAN,GAAsBb,MAAM,CAACc,WAAD,CAAtC,CAAlB;AACA,QAAMI,eAAe,GAAGpB,IAAI,CAACC,IAAL,CAAUC,MAAM,CAACe,WAAD,CAAhB,IAAiC3B,YAAzD;AACA,QAAM+B,aAAa,GAAGrB,IAAI,CAACC,IAAL,CAAUC,MAAM,CAACgB,SAAD,CAAhB,IAA+B3B,UAArD;;AAEA,MAAK6B,eAAe,GAAGC,aAAnB,GAAqCF,SAAS,GAAG,CAArD,EAAyD;AACvDd,IAAAA,KAAK,CAACjB,YAAD,CAAL;AACA,WAAOU,QAAQ,CAAC,YAAD,CAAf;AACD;;AAED,SAAOA,QAAQ,CAAC,aAAD,CAAf;AACD,CAXD;;AAaA,MAAMwB,sBAAsB,GAAG,CAACC,UAAD,EAAaC,UAAb,EAAyBC,YAAzB,EAAuCC,UAAvC,EAAmD5B,QAAnD,KAAgE;AAC7F,QAAM6B,UAAU,GAAG3B,IAAI,CAACC,IAAL,CAAUC,MAAM,CAACqB,UAAD,CAAN,GAAqBrB,MAAM,CAACsB,UAAD,CAArC,CAAnB;AACA,QAAMI,cAAc,GAAG5B,IAAI,CAACC,IAAL,CAAUC,MAAM,CAACuB,YAAD,CAAhB,IAAkCnC,YAAzD;AACA,QAAMuC,YAAY,GAAG7B,IAAI,CAACC,IAAL,CAAUC,MAAM,CAACwB,UAAD,CAAhB,IAAgCnC,UAArD;;AAEA,MAAKqC,cAAc,GAAGC,YAAlB,GAAmCF,UAAU,GAAG,CAApD,EAAwD;AACtDtB,IAAAA,KAAK,CAACjB,YAAD,CAAL;AACA,WAAOU,QAAQ,CAAC,aAAD,CAAf;AACD;;AAED,SAAOA,QAAQ,CAAC,SAAD,CAAf;AACD,CAXD;;AAaA,SACEL,qBADF,EAEEa,sBAFF,EAGEQ,qBAHF,EAIEQ,sBAJF","sourcesContent":["const errorDWAlert = 'O total de área das portas e janelas deve ser no máximo 50% da área de parede';\nconst errorWallSize = 'A altura da parede que possui portas deve ser de no mínimo 220cm.'\nconst windowSquare = 24000;\nconst doorSquare = 15200;\nconst minmunWallWithDoor = 220;\n\nconst verifyFirstDoorWindow = (heightOne, widthtOne, firstWindow, firstDoor, navigate) => {\n  const firstWall = Math.ceil(Number(heightOne) * Number(widthtOne));\n  const wallWindowOne = Math.ceil(Number(firstWindow)) * windowSquare;\n  const wallDoorOne = Math.ceil(Number(firstDoor)) * doorSquare;\n\n  if (firstDoor > 0) {\n    if (heightOne < minmunWallWithDoor) {\n      alert(errorWallSize);\n      return navigate('/firstWall');\n    }\n  }\n\n  if ((wallWindowOne + wallDoorOne) > (firstWall / 2)) {\n    alert(errorDWAlert);\n    return navigate('/firstWall');\n  }\n\n  return navigate('/secondWall');\n};\n\nconst verifySecondDoorWindow = (heightTwo, widthtTwo, secondWindow, secondDoor, navigate) => {\n  const secondWall = Math.ceil(Number(heightTwo) * Number(widthtTwo));\n  const wallWindowTwo = Math.ceil(Number(secondWindow)) * windowSquare;\n  const wallDoorTwo = Math.ceil(Number(secondDoor)) * doorSquare;\n\n  if ((wallWindowTwo + wallDoorTwo) > (secondWall / 2)) {\n    alert(errorDWAlert);\n    return navigate('/secondWall');\n  }\n\n  return navigate('/thirdWall');\n};\n\nconst verifyThirdDoorWindow = (heightThree, widthtThree, thirdWindow, thirdDoor, navigate) => {\n  const thirdWall = Math.ceil(Number(heightThree) * Number(widthtThree));\n  const wallWindowThree = Math.ceil(Number(thirdWindow)) * windowSquare;\n  const wallDoorThree = Math.ceil(Number(thirdDoor)) * doorSquare;\n\n  if ((wallWindowThree + wallDoorThree) > (thirdWall / 2)) {\n    alert(errorDWAlert);\n    return navigate('/thirdWall');\n  }\n\n  return navigate('/fourthWall');\n};\n\nconst verifyFourthDoorWindow = (heightFour, widthtFour, fourthWindow, fourthDoor, navigate) => {\n  const fourthWall = Math.ceil(Number(heightFour) * Number(widthtFour));\n  const wallWindowFour = Math.ceil(Number(fourthWindow)) * windowSquare;\n  const wallDoorFour = Math.ceil(Number(fourthDoor)) * doorSquare;\n\n  if ((wallWindowFour + wallDoorFour) > (fourthWall / 2)) {\n    alert(errorDWAlert);\n    return navigate('/fourthWall');\n  }\n\n  return navigate('/result');\n};\n\nexport {\n  verifyFirstDoorWindow,\n  verifySecondDoorWindow,\n  verifyThirdDoorWindow,\n  verifyFourthDoorWindow,\n};\n"]},"metadata":{},"sourceType":"module"}