{"ast":null,"code":"// const errorDWAlert = 'O total de área das portas e janelas deve ser no máximo 50% da área de parede';\n// const errorWallSize = 'A altura da parede que possui portas deve ser de no mínimo 220cm.'\nconst windowSquare = 24000;\nconst doorSquare = 15200;\nconst minmunWallWithDoor = 220;\n\nconst VerifyFirstDoorWindow = (heightOne, widthtOne, firstWindow, firstDoor, navigate) => {\n  const firstWall = Math.ceil(Number(heightOne) * Number(widthtOne));\n  const wallWindowOne = Math.ceil(Number(firstWindow)) * windowSquare;\n  const wallDoorOne = Math.ceil(Number(firstDoor)) * doorSquare;\n\n  if (firstDoor > 0) {\n    if (heightOne < minmunWallWithDoor) {\n      return 'errorWallSize';\n    }\n  }\n\n  if (wallWindowOne + wallDoorOne > firstWall / 2) {\n    return 'errorDWAlert';\n  }\n\n  return navigate('/secondWall');\n};\n\n_c = VerifyFirstDoorWindow;\n\nconst VerifySecondDoorWindow = (heightTwo, widthtTwo, secondWindow, secondDoor, navigate) => {\n  const secondWall = Math.ceil(Number(heightTwo) * Number(widthtTwo));\n  const wallWindowTwo = Math.ceil(Number(secondWindow)) * windowSquare;\n  const wallDoorTwo = Math.ceil(Number(secondDoor)) * doorSquare;\n\n  if (secondDoor > 0) {\n    if (heightTwo < minmunWallWithDoor) {\n      return 'errorWallSize';\n    }\n  }\n\n  if (wallWindowTwo + wallDoorTwo > secondWall / 2) {\n    return 'errorDWAlert';\n  }\n\n  return navigate('/thirdWall');\n};\n\n_c2 = VerifySecondDoorWindow;\n\nconst VerifyThirdDoorWindow = (heightThree, widthtThree, thirdWindow, thirdDoor, navigate) => {\n  const thirdWall = Math.ceil(Number(heightThree) * Number(widthtThree));\n  const wallWindowThree = Math.ceil(Number(thirdWindow)) * windowSquare;\n  const wallDoorThree = Math.ceil(Number(thirdDoor)) * doorSquare;\n\n  if (thirdDoor > 0) {\n    if (heightThree < minmunWallWithDoor) {\n      return 'errorWallSize';\n    }\n  }\n\n  if (wallWindowThree + wallDoorThree > thirdWall / 2) {\n    return 'errorDWAlert';\n  }\n\n  return navigate('/fourthWall');\n};\n\n_c3 = VerifyThirdDoorWindow;\n\nconst VerifyFourthDoorWindow = (heightFour, widthtFour, fourthWindow, fourthDoor, navigate) => {\n  const fourthWall = Math.ceil(Number(heightFour) * Number(widthtFour));\n  const wallWindowFour = Math.ceil(Number(fourthWindow)) * windowSquare;\n  const wallDoorFour = Math.ceil(Number(fourthDoor)) * doorSquare;\n\n  if (fourthDoor > 0) {\n    if (heightFour < minmunWallWithDoor) {\n      return 'errorWallSize';\n    }\n  }\n\n  if (wallWindowFour + wallDoorFour > fourthWall / 2) {\n    return 'errorDWAlert';\n  }\n\n  return navigate('/result');\n};\n\n_c4 = VerifyFourthDoorWindow;\nexport { VerifyFirstDoorWindow, VerifySecondDoorWindow, VerifyThirdDoorWindow, VerifyFourthDoorWindow };\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"VerifyFirstDoorWindow\");\n$RefreshReg$(_c2, \"VerifySecondDoorWindow\");\n$RefreshReg$(_c3, \"VerifyThirdDoorWindow\");\n$RefreshReg$(_c4, \"VerifyFourthDoorWindow\");","map":{"version":3,"sources":["/home/cae/appTintas/src/Helpers/VerifyDoorsAndWindows.jsx"],"names":["windowSquare","doorSquare","minmunWallWithDoor","VerifyFirstDoorWindow","heightOne","widthtOne","firstWindow","firstDoor","navigate","firstWall","Math","ceil","Number","wallWindowOne","wallDoorOne","VerifySecondDoorWindow","heightTwo","widthtTwo","secondWindow","secondDoor","secondWall","wallWindowTwo","wallDoorTwo","VerifyThirdDoorWindow","heightThree","widthtThree","thirdWindow","thirdDoor","thirdWall","wallWindowThree","wallDoorThree","VerifyFourthDoorWindow","heightFour","widthtFour","fourthWindow","fourthDoor","fourthWall","wallWindowFour","wallDoorFour"],"mappings":"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","sourcesContent":["// const errorDWAlert = 'O total de área das portas e janelas deve ser no máximo 50% da área de parede';\n// const errorWallSize = 'A altura da parede que possui portas deve ser de no mínimo 220cm.'\nconst windowSquare = 24000;\nconst doorSquare = 15200;\nconst minmunWallWithDoor = 220;\n\nconst VerifyFirstDoorWindow = (heightOne, widthtOne, firstWindow, firstDoor, navigate) => {\n\n  const firstWall = Math.ceil(Number(heightOne) * Number(widthtOne));\n  const wallWindowOne = Math.ceil(Number(firstWindow)) * windowSquare;\n  const wallDoorOne = Math.ceil(Number(firstDoor)) * doorSquare;\n\n  if (firstDoor > 0) {\n    if (heightOne < minmunWallWithDoor) {\n      return 'errorWallSize';\n    }\n  }\n\n  if ((wallWindowOne + wallDoorOne) > (firstWall / 2)) {\n    return 'errorDWAlert';\n  }\n\n  return navigate('/secondWall');\n};\n\nconst VerifySecondDoorWindow = (heightTwo, widthtTwo, secondWindow, secondDoor, navigate) => {\n  const secondWall = Math.ceil(Number(heightTwo) * Number(widthtTwo));\n  const wallWindowTwo = Math.ceil(Number(secondWindow)) * windowSquare;\n  const wallDoorTwo = Math.ceil(Number(secondDoor)) * doorSquare;\n\n  if (secondDoor > 0) {\n    if (heightTwo < minmunWallWithDoor) {\n      return 'errorWallSize';\n    }\n  }\n\n  if ((wallWindowTwo + wallDoorTwo) > (secondWall / 2)) {\n    return 'errorDWAlert';\n  }\n\n  return navigate('/thirdWall');\n};\n\nconst VerifyThirdDoorWindow = (heightThree, widthtThree, thirdWindow, thirdDoor, navigate) => {\n  const thirdWall = Math.ceil(Number(heightThree) * Number(widthtThree));\n  const wallWindowThree = Math.ceil(Number(thirdWindow)) * windowSquare;\n  const wallDoorThree = Math.ceil(Number(thirdDoor)) * doorSquare;\n\n  if (thirdDoor > 0) {\n    if (heightThree < minmunWallWithDoor) {\n      return 'errorWallSize';\n    }\n  }\n\n  if ((wallWindowThree + wallDoorThree) > (thirdWall / 2)) {\n    return 'errorDWAlert';\n  }\n\n  return navigate('/fourthWall');\n};\n\nconst VerifyFourthDoorWindow = (heightFour, widthtFour, fourthWindow, fourthDoor, navigate) => {\n  const fourthWall = Math.ceil(Number(heightFour) * Number(widthtFour));\n  const wallWindowFour = Math.ceil(Number(fourthWindow)) * windowSquare;\n  const wallDoorFour = Math.ceil(Number(fourthDoor)) * doorSquare;\n\n  if (fourthDoor > 0) {\n    if (heightFour < minmunWallWithDoor) {\n      return 'errorWallSize';\n    }\n  }\n\n  if ((wallWindowFour + wallDoorFour) > (fourthWall / 2)) {\n    return 'errorDWAlert';\n  }\n\n  return navigate('/result');\n};\n\nexport {\n  VerifyFirstDoorWindow,\n  VerifySecondDoorWindow,\n  VerifyThirdDoorWindow,\n  VerifyFourthDoorWindow,\n};\n"]},"metadata":{},"sourceType":"module"}