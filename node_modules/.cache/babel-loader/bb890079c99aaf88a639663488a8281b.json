{"ast":null,"code":"var _jsxFileName = \"/home/cae/digitalRepuclic/app-digital-republic/digital-republic/src/Pages/ResultPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport myContext from '../Context/myContext';\nimport '../CSS/main.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ResultPage() {\n  _s();\n\n  const {\n    name,\n    heightOne,\n    heightTwo,\n    heightThree,\n    heightFour,\n    widthtOne,\n    widthtTwo,\n    widthtThree,\n    widthtFour,\n    firstWindow,\n    secondWindow,\n    thirdWindow,\n    fourthWindow,\n    firstDoor,\n    secondDoor,\n    thirdDoor,\n    fourthDoor\n  } = useContext(myContext);\n  const [totalSquare, setTotalSquare] = useState(0);\n  const [allCans, setAllCans] = useState([]);\n  const windowSquare = 2.4;\n  const doorSquare = 1.52;\n  const squareMeters = 10000; // useEffect para calcular quantos metros quadrados de parede existe para pintura\n\n  useEffect(() => {\n    const wallOne = Number(heightOne) * Number(widthtOne) / squareMeters;\n    const wallTwo = Number(heightTwo) * Number(widthtTwo) / squareMeters;\n    const wallThree = Number(heightThree) * Number(widthtThree) / squareMeters;\n    const wallFour = Number(heightFour) * Number(widthtFour) / squareMeters;\n    const sumAllWindows = (Number(firstWindow) + Number(secondWindow) + Number(thirdWindow) + Number(fourthWindow)) * windowSquare;\n    const sumAllDoors = (Number(firstDoor) + Number(secondDoor) + Number(thirdDoor) + Number(fourthDoor)) * doorSquare;\n    const total = Math.ceil(wallOne + wallTwo + wallThree + wallFour - (sumAllWindows + sumAllDoors));\n    setTotalSquare(total);\n  }); // useEffect para separar as latas por tamanho\n\n  useEffect(() => {\n    const paintCansSize = [18, 3.6, 2.5, 0.5];\n    let totalPaint = totalSquare / 5;\n    const totalCans = [];\n    paintCansSize.forEach((tin, index) => {\n      if (tin < totalPaint) {\n        totalPaint -= tin;\n        totalCans.push(index);\n      }\n\n      return null;\n    });\n\n    if (totalPaint > 0) {\n      totalCans.push(3);\n    }\n\n    const total = totalCans.map(size => paintCansSize[size]);\n    setTotalCans(total);\n  }, [setTotalCans]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Ol\\xE1 \", name, \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Voc\\xEA precisa de\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), allCans.map(tin => {\n        /*#__PURE__*/\n        _jsxDEV(\"h2\", {\n          children: [\"1 lata de \", tin, \"l\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"para colorir \", totalSquare, \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ResultPage, \"29mKuj9ErLqBNzfyvvLvgAeob4c=\");\n\n_c = ResultPage;\nexport default ResultPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResultPage\");","map":{"version":3,"sources":["/home/cae/digitalRepuclic/app-digital-republic/digital-republic/src/Pages/ResultPage.jsx"],"names":["React","useContext","useEffect","useState","myContext","ResultPage","name","heightOne","heightTwo","heightThree","heightFour","widthtOne","widthtTwo","widthtThree","widthtFour","firstWindow","secondWindow","thirdWindow","fourthWindow","firstDoor","secondDoor","thirdDoor","fourthDoor","totalSquare","setTotalSquare","allCans","setAllCans","windowSquare","doorSquare","squareMeters","wallOne","Number","wallTwo","wallThree","wallFour","sumAllWindows","sumAllDoors","total","Math","ceil","paintCansSize","totalPaint","totalCans","forEach","tin","index","push","map","size","setTotalCans"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport myContext from '../Context/myContext';\nimport '../CSS/main.css';\n\nfunction ResultPage() {\n  const {\n    name,\n    heightOne,\n    heightTwo,\n    heightThree,\n    heightFour,\n    widthtOne,\n    widthtTwo,\n    widthtThree,\n    widthtFour,\n    firstWindow,\n    secondWindow,\n    thirdWindow,\n    fourthWindow,\n    firstDoor,\n    secondDoor,\n    thirdDoor,\n    fourthDoor,\n  } = useContext(myContext);\n  const [totalSquare, setTotalSquare] = useState(0);\n  const [allCans, setAllCans] = useState([]);\n\n  const windowSquare = 2.4;\n  const doorSquare = 1.52;\n  const squareMeters = 10000;\n\n  // useEffect para calcular quantos metros quadrados de parede existe para pintura\n  useEffect(() => {\n    const wallOne = (Number(heightOne) * Number(widthtOne)) / squareMeters;\n    const wallTwo = (Number(heightTwo) * Number(widthtTwo)) / squareMeters;\n    const wallThree = (Number(heightThree) * Number(widthtThree)) / squareMeters;\n    const wallFour = (Number(heightFour) * Number(widthtFour)) / squareMeters;\n\n    const sumAllWindows = (Number(firstWindow) + Number(secondWindow) + Number(thirdWindow) + Number(fourthWindow)) * windowSquare;\n    const sumAllDoors = (Number(firstDoor) + Number(secondDoor) + Number(thirdDoor) + Number(fourthDoor)) * doorSquare;\n    const total = Math.ceil((wallOne + wallTwo + wallThree + wallFour) - (sumAllWindows + sumAllDoors));\n\n    setTotalSquare(total);\n  });\n  \n// useEffect para separar as latas por tamanho\n  useEffect(() => {\n    const paintCansSize = [18, 3.6, 2.5, 0.5];\n    let totalPaint = totalSquare / 5;\n    const totalCans = [];\n\n    paintCansSize.forEach((tin, index) => {\n      if (tin < totalPaint) {\n        totalPaint -= tin;\n        totalCans.push(index);\n      }\n      return null;\n    });\n    \n    if (totalPaint > 0) {\n      totalCans.push(3);\n    }\n\n    const total = totalCans.map((size) => paintCansSize[size]);\n    setTotalCans(total);\n  }, [setTotalCans]);\n\n  return (\n    <div className=\"page-container\">\n      <div className=\"results\">\n        <h1>Olá {name}.</h1>\n        <h1>Você precisa de</h1>\n        {allCans.map((tin) => {\n          <h2>1 lata de {tin}l</h2>\n        })}\n        <h1>para colorir {totalSquare}.</h1>\n      </div>\n    </div>\n  );\n}\n\nexport default ResultPage;\n"]},"metadata":{},"sourceType":"module"}