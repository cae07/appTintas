{"ast":null,"code":"// Arquivo para funçoes de verificação de tamanho das paredes\n// import { useContext } from 'react';\n// import myContext from '../Context/myContext';\nimport { VerifyFirstDoorWindow, VerifySecondDoorWindow, VerifyThirdDoorWindow, VerifyFourthDoorWindow } from './VerifyDoorsAndWindows'; // import { useContext } from \"react\";\n// import myContext from \"../Context/myContext\";\n\nconst maximum = 150000;\nconst minimun = 10000; // const maximumAlert = 'A parede não pode ter mais que 15 metros quadrados.'\n// const minimumAlert = 'A parede não pode ter menos que 1 metro quadrado.'\n\nconst VerifyFirstWallMesures = (heightOne, widthtOne, firstWindow, firstDoor, navigate) => {\n  // const { setTextModal } = useContext(myContext);\n  const firstWall = Math.ceil(Number(heightOne) * Number(widthtOne));\n\n  if (firstWall > maximum) {\n    // setTextModal(maximumAlert);\n    // return navigate('/firstWall');\n    return 'maximumAlert';\n  }\n\n  if (firstWall < minimun) {\n    // setTextModal(minimumAlert);\n    // return navigate('/firstWall');\n    return 'minimumAlert';\n  }\n\n  VerifyFirstDoorWindow(heightOne, widthtOne, firstWindow, firstDoor, navigate);\n};\n\n_c = VerifyFirstWallMesures;\n\nconst VerifySecondWallMesures = (heightTwo, widthtTwo, secondWindow, secondDoor, navigate) => {\n  const secondWall = Math.ceil(Number(heightTwo) * Number(widthtTwo));\n\n  if (secondWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/secondWall');\n  }\n\n  if (secondWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/secondWall');\n  }\n\n  VerifySecondDoorWindow(heightTwo, widthtTwo, secondWindow, secondDoor, navigate);\n};\n\n_c2 = VerifySecondWallMesures;\n\nconst VerifyThirdWallMesures = (heightThree, widthtThree, thirdWindow, thirdDoor, navigate) => {\n  const thirdWall = Math.ceil(Number(heightThree) * Number(widthtThree));\n\n  if (thirdWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/thirdWall');\n  }\n\n  if (thirdWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/thirdWall');\n  }\n\n  VerifyThirdDoorWindow(heightThree, widthtThree, thirdWindow, thirdDoor, navigate);\n};\n\n_c3 = VerifyThirdWallMesures;\n\nconst VerifyFourthWallMesures = (heightFour, widthtFour, fourthWindow, fourthDoor, navigate) => {\n  const fourthWall = Math.ceil(Number(heightFour) * Number(widthtFour));\n\n  if (fourthWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/fourthWall');\n  }\n\n  if (fourthWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/fourthWall');\n  }\n\n  VerifyFourthDoorWindow(heightFour, widthtFour, fourthWindow, fourthDoor, navigate);\n};\n\n_c4 = VerifyFourthWallMesures;\nexport { VerifyFirstWallMesures, VerifySecondWallMesures, VerifyThirdWallMesures, VerifyFourthWallMesures };\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"VerifyFirstWallMesures\");\n$RefreshReg$(_c2, \"VerifySecondWallMesures\");\n$RefreshReg$(_c3, \"VerifyThirdWallMesures\");\n$RefreshReg$(_c4, \"VerifyFourthWallMesures\");","map":{"version":3,"sources":["/home/cae/appTintas/src/Helpers/VerifyMesures.jsx"],"names":["VerifyFirstDoorWindow","VerifySecondDoorWindow","VerifyThirdDoorWindow","VerifyFourthDoorWindow","maximum","minimun","VerifyFirstWallMesures","heightOne","widthtOne","firstWindow","firstDoor","navigate","firstWall","Math","ceil","Number","VerifySecondWallMesures","heightTwo","widthtTwo","secondWindow","secondDoor","secondWall","alert","maximumAlert","minimumAlert","VerifyThirdWallMesures","heightThree","widthtThree","thirdWindow","thirdDoor","thirdWall","VerifyFourthWallMesures","heightFour","widthtFour","fourthWindow","fourthDoor","fourthWall"],"mappings":"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","sourcesContent":["// Arquivo para funçoes de verificação de tamanho das paredes\n// import { useContext } from 'react';\n// import myContext from '../Context/myContext';\nimport {\n  VerifyFirstDoorWindow,\n  VerifySecondDoorWindow,\n  VerifyThirdDoorWindow,\n  VerifyFourthDoorWindow,\n} from './VerifyDoorsAndWindows';\n\n// import { useContext } from \"react\";\n// import myContext from \"../Context/myContext\";\n\nconst maximum = 150000;\nconst minimun = 10000;\n// const maximumAlert = 'A parede não pode ter mais que 15 metros quadrados.'\n// const minimumAlert = 'A parede não pode ter menos que 1 metro quadrado.'\n\nconst VerifyFirstWallMesures = (heightOne, widthtOne, firstWindow, firstDoor, navigate) => {\n  // const { setTextModal } = useContext(myContext);\n\n  const firstWall = Math.ceil(Number(heightOne) * Number(widthtOne));\n  if (firstWall > maximum) {\n    // setTextModal(maximumAlert);\n    // return navigate('/firstWall');\n    return 'maximumAlert';\n  }\n  if (firstWall < minimun) {\n    // setTextModal(minimumAlert);\n    // return navigate('/firstWall');\n    return 'minimumAlert';\n  }\n\n  VerifyFirstDoorWindow(heightOne, widthtOne, firstWindow, firstDoor, navigate);\n};\n\nconst VerifySecondWallMesures = (heightTwo, widthtTwo, secondWindow, secondDoor, navigate) => {\n  const secondWall = Math.ceil(Number(heightTwo) * Number(widthtTwo));\n  if (secondWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/secondWall');\n  }\n  if (secondWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/secondWall');\n  }\n\n  VerifySecondDoorWindow(heightTwo, widthtTwo, secondWindow, secondDoor, navigate);\n};\n\nconst VerifyThirdWallMesures = (heightThree, widthtThree, thirdWindow, thirdDoor, navigate) => {\n  const thirdWall = Math.ceil(Number(heightThree) * Number(widthtThree));\n  if (thirdWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/thirdWall');\n  }\n  if (thirdWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/thirdWall');\n  }\n\n  VerifyThirdDoorWindow(heightThree, widthtThree, thirdWindow, thirdDoor, navigate);\n};\n\nconst VerifyFourthWallMesures = (heightFour, widthtFour, fourthWindow, fourthDoor, navigate) => {\n  const fourthWall = Math.ceil(Number(heightFour) * Number(widthtFour));\n  if (fourthWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/fourthWall');\n  }\n  if (fourthWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/fourthWall');\n  }\n\n  VerifyFourthDoorWindow(heightFour, widthtFour, fourthWindow, fourthDoor, navigate);\n};\n\nexport {\n  VerifyFirstWallMesures,\n  VerifySecondWallMesures,\n  VerifyThirdWallMesures,\n  VerifyFourthWallMesures,\n};\n"]},"metadata":{},"sourceType":"module"}