{"ast":null,"code":"var _jsxFileName = \"/home/cae/digitalRepuclic/app-digital-republic/digital-republic/src/Pages/ResultPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport myContext from '../Context/myContext';\nimport '../CSS/results.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ResultPage() {\n  _s();\n\n  const {\n    name,\n    heightOne,\n    heightTwo,\n    heightThree,\n    heightFour,\n    widthtOne,\n    widthtTwo,\n    widthtThree,\n    widthtFour,\n    firstWindow,\n    secondWindow,\n    thirdWindow,\n    fourthWindow,\n    firstDoor,\n    secondDoor,\n    thirdDoor,\n    fourthDoor\n  } = useContext(myContext);\n  const [totalSquare, setTotalSquare] = useState(0);\n  const [allCans, setAllCans] = useState([]);\n  const navigate = useNavigate();\n  const windowSquare = 2.4;\n  const doorSquare = 1.52;\n  const squareMeters = 10000; // mantive a lata de 18 litros, mas baseado nas regras de negócio, não é necessário\n\n  const paintCansSize = [18, 3.6, 2.5, 0.5]; // useEffect para calcular quantos metros quadrados de parede existe para pintura\n\n  useEffect(() => {\n    const wallOne = Number(heightOne) * Number(widthtOne) / squareMeters;\n    const wallTwo = Number(heightTwo) * Number(widthtTwo) / squareMeters;\n    const wallThree = Number(heightThree) * Number(widthtThree) / squareMeters;\n    const wallFour = Number(heightFour) * Number(widthtFour) / squareMeters;\n    const sumAllWindows = (Number(firstWindow) + Number(secondWindow) + Number(thirdWindow) + Number(fourthWindow)) * windowSquare;\n    const sumAllDoors = (Number(firstDoor) + Number(secondDoor) + Number(thirdDoor) + Number(fourthDoor)) * doorSquare;\n    const squareTotal = (wallOne + wallTwo + wallThree + wallFour - (sumAllWindows + sumAllDoors)).toFixed(2);\n    finalAnswer(squareTotal);\n  }, []);\n\n  const VerifyTotalCans = squareTotal => {\n    const totalCans = [];\n    let totalPaint = squareTotal / 5;\n    paintCansSize.forEach(tin => {\n      // HOF para definir tamanhos de latas\n      if (tin < totalPaint) {\n        totalPaint -= tin;\n        totalCans.push(tin);\n      }\n\n      return null;\n    });\n\n    if (totalPaint > 0) {\n      // verificação se ainda existem partes sem pintar\n      totalCans.push(0.5);\n    }\n\n    return totalCans;\n  };\n\n  const VerifyQuantity = allCans => {\n    const count = {};\n    allCans.forEach(tin => {\n      if (count[tin]) {\n        count[tin] += 1;\n        return;\n      }\n\n      count[tin] = 1;\n    });\n    return count;\n  };\n\n  const finalAnswer = squareTotal => {\n    setTotalSquare(squareTotal); // seta a informação para mostrar na tela;\n\n    const totalPaint = VerifyTotalCans(squareTotal);\n    const separatedCans = VerifyQuantity(totalPaint);\n    const keys = Object.entries(separatedCans);\n    setAllCans(keys);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"results-container page-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Ol\\xE1 \", name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Voc\\xEA precisa de\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), allCans.map((tin, index) => {\n        if (tin[1] === 1) {\n          return /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [tin[1], \" lata de \", tin[0], \"l\"]\n          }, `${tin[0]}-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 20\n          }, this);\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [tin[1], \" latas de \", tin[0], \"l\"]\n        }, `${tin[0]}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 18\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"para colorir \", totalSquare, \"m\\xB2.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buy-button\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"buton\",\n          onClick: () => navigate('/contato'),\n          children: \"COMPRAR\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ResultPage, \"UpC0OYtvnN9pI6Z92zxPXTDo0b4=\", false, function () {\n  return [useNavigate];\n});\n\n_c = ResultPage;\nexport default ResultPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResultPage\");","map":{"version":3,"sources":["/home/cae/digitalRepuclic/app-digital-republic/digital-republic/src/Pages/ResultPage.jsx"],"names":["React","useContext","useEffect","useState","useNavigate","myContext","ResultPage","name","heightOne","heightTwo","heightThree","heightFour","widthtOne","widthtTwo","widthtThree","widthtFour","firstWindow","secondWindow","thirdWindow","fourthWindow","firstDoor","secondDoor","thirdDoor","fourthDoor","totalSquare","setTotalSquare","allCans","setAllCans","navigate","windowSquare","doorSquare","squareMeters","paintCansSize","wallOne","Number","wallTwo","wallThree","wallFour","sumAllWindows","sumAllDoors","squareTotal","toFixed","finalAnswer","VerifyTotalCans","totalCans","totalPaint","forEach","tin","push","VerifyQuantity","count","separatedCans","keys","Object","entries","map","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAO,oBAAP;;;AAEA,SAASC,UAAT,GAAsB;AAAA;;AACpB,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,SAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA,SANI;AAOJC,IAAAA,SAPI;AAQJC,IAAAA,WARI;AASJC,IAAAA,UATI;AAUJC,IAAAA,WAVI;AAWJC,IAAAA,YAXI;AAYJC,IAAAA,WAZI;AAaJC,IAAAA,YAbI;AAcJC,IAAAA,SAdI;AAeJC,IAAAA,UAfI;AAgBJC,IAAAA,SAhBI;AAiBJC,IAAAA;AAjBI,MAkBFtB,UAAU,CAACI,SAAD,CAlBd;AAoBA,QAAM,CAACmB,WAAD,EAAcC,cAAd,IAAgCtB,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACuB,OAAD,EAAUC,UAAV,IAAwBxB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAMyB,QAAQ,GAAGxB,WAAW,EAA5B;AAEA,QAAMyB,YAAY,GAAG,GAArB;AACA,QAAMC,UAAU,GAAG,IAAnB;AACA,QAAMC,YAAY,GAAG,KAArB,CA3BoB,CA4BpB;;AACA,QAAMC,aAAa,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,GAAf,CAAtB,CA7BoB,CA+BpB;;AACA9B,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM+B,OAAO,GAAIC,MAAM,CAAC1B,SAAD,CAAN,GAAoB0B,MAAM,CAACtB,SAAD,CAA3B,GAA0CmB,YAA1D;AACA,UAAMI,OAAO,GAAID,MAAM,CAACzB,SAAD,CAAN,GAAoByB,MAAM,CAACrB,SAAD,CAA3B,GAA0CkB,YAA1D;AACA,UAAMK,SAAS,GAAIF,MAAM,CAACxB,WAAD,CAAN,GAAsBwB,MAAM,CAACpB,WAAD,CAA7B,GAA8CiB,YAAhE;AACA,UAAMM,QAAQ,GAAIH,MAAM,CAACvB,UAAD,CAAN,GAAqBuB,MAAM,CAACnB,UAAD,CAA5B,GAA4CgB,YAA7D;AAEA,UAAMO,aAAa,GAAG,CACpBJ,MAAM,CAAClB,WAAD,CAAN,GAAsBkB,MAAM,CAACjB,YAAD,CAA5B,GAA6CiB,MAAM,CAAChB,WAAD,CAAnD,GAAmEgB,MAAM,CAACf,YAAD,CADrD,IAElBU,YAFJ;AAIA,UAAMU,WAAW,GAAG,CAClBL,MAAM,CAACd,SAAD,CAAN,GAAoBc,MAAM,CAACb,UAAD,CAA1B,GAAyCa,MAAM,CAACZ,SAAD,CAA/C,GAA6DY,MAAM,CAACX,UAAD,CADjD,IAEhBO,UAFJ;AAIA,UAAMU,WAAW,GAAG,CACjBP,OAAO,GAAGE,OAAV,GAAoBC,SAApB,GAAgCC,QAAjC,IAA8CC,aAAa,GAAGC,WAA9D,CADkB,EAElBE,OAFkB,CAEV,CAFU,CAApB;AAIAC,IAAAA,WAAW,CAACF,WAAD,CAAX;AACD,GAnBQ,EAmBN,EAnBM,CAAT;;AAqBA,QAAMG,eAAe,GAAIH,WAAD,IAAiB;AACvC,UAAMI,SAAS,GAAG,EAAlB;AACA,QAAIC,UAAU,GAAGL,WAAW,GAAG,CAA/B;AAEAR,IAAAA,aAAa,CAACc,OAAd,CAAuBC,GAAD,IAAS;AAAE;AAC/B,UAAIA,GAAG,GAAGF,UAAV,EAAsB;AACpBA,QAAAA,UAAU,IAAIE,GAAd;AACAH,QAAAA,SAAS,CAACI,IAAV,CAAeD,GAAf;AACD;;AACD,aAAO,IAAP;AACD,KAND;;AAQA,QAAIF,UAAU,GAAG,CAAjB,EAAoB;AAAE;AACpBD,MAAAA,SAAS,CAACI,IAAV,CAAe,GAAf;AACD;;AACD,WAAOJ,SAAP;AACD,GAhBD;;AAkBA,QAAMK,cAAc,GAAIvB,OAAD,IAAa;AAClC,UAAMwB,KAAK,GAAG,EAAd;AAEAxB,IAAAA,OAAO,CAACoB,OAAR,CAAiBC,GAAD,IAAS;AACvB,UAAIG,KAAK,CAACH,GAAD,CAAT,EAAgB;AACdG,QAAAA,KAAK,CAACH,GAAD,CAAL,IAAc,CAAd;AACA;AACD;;AACDG,MAAAA,KAAK,CAACH,GAAD,CAAL,GAAa,CAAb;AACD,KAND;AAQA,WAAOG,KAAP;AACD,GAZD;;AAcA,QAAMR,WAAW,GAAIF,WAAD,IAAiB;AACnCf,IAAAA,cAAc,CAACe,WAAD,CAAd,CADmC,CACN;;AAC7B,UAAMK,UAAU,GAAGF,eAAe,CAACH,WAAD,CAAlC;AAEA,UAAMW,aAAa,GAAGF,cAAc,CAACJ,UAAD,CAApC;AACA,UAAMO,IAAI,GAAGC,MAAM,CAACC,OAAP,CAAeH,aAAf,CAAb;AACAxB,IAAAA,UAAU,CAACyB,IAAD,CAAV;AACD,GAPD;;AASA,sBACE;AAAS,IAAA,SAAS,EAAC,kCAAnB;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACE;AAAA,8BAAS7C,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAGGmB,OAAO,CAAC6B,GAAR,CAAY,CAACR,GAAD,EAAMS,KAAN,KAAgB;AAC3B,YAAIT,GAAG,CAAC,CAAD,CAAH,KAAW,CAAf,EAAkB;AAChB,8BAAO;AAAA,uBAAkCA,GAAG,CAAC,CAAD,CAArC,eAAmDA,GAAG,CAAC,CAAD,CAAtD;AAAA,aAAW,GAAEA,GAAG,CAAC,CAAD,CAAI,IAAGS,KAAM,EAA7B;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD;;AACD,4BAAO;AAAA,qBAAkCT,GAAG,CAAC,CAAD,CAArC,gBAAoDA,GAAG,CAAC,CAAD,CAAvD;AAAA,WAAW,GAAEA,GAAG,CAAC,CAAD,CAAI,IAAGS,KAAM,EAA7B;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OALA,CAHH,eASE;AAAA,oCAAkBhC,WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,eAUE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACE;AACE,UAAA,IAAI,EAAC,OADP;AAEE,UAAA,OAAO,EAAG,MAAMI,QAAQ,CAAC,UAAD,CAF1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD;;GArHQtB,U;UAuBUF,W;;;KAvBVE,U;AAuHT,eAAeA,UAAf","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport myContext from '../Context/myContext';\nimport '../CSS/results.css';\n\nfunction ResultPage() {\n  const {\n    name,\n    heightOne,\n    heightTwo,\n    heightThree,\n    heightFour,\n    widthtOne,\n    widthtTwo,\n    widthtThree,\n    widthtFour,\n    firstWindow,\n    secondWindow,\n    thirdWindow,\n    fourthWindow,\n    firstDoor,\n    secondDoor,\n    thirdDoor,\n    fourthDoor,\n  } = useContext(myContext);\n\n  const [totalSquare, setTotalSquare] = useState(0);\n  const [allCans, setAllCans] = useState([]);\n  const navigate = useNavigate();\n\n  const windowSquare = 2.4;\n  const doorSquare = 1.52;\n  const squareMeters = 10000;\n  // mantive a lata de 18 litros, mas baseado nas regras de negócio, não é necessário\n  const paintCansSize = [18, 3.6, 2.5, 0.5];\n\n  // useEffect para calcular quantos metros quadrados de parede existe para pintura\n  useEffect(() => {\n    const wallOne = (Number(heightOne) * Number(widthtOne)) / squareMeters;\n    const wallTwo = (Number(heightTwo) * Number(widthtTwo)) / squareMeters;\n    const wallThree = (Number(heightThree) * Number(widthtThree)) / squareMeters;\n    const wallFour = (Number(heightFour) * Number(widthtFour)) / squareMeters;\n\n    const sumAllWindows = (\n      Number(firstWindow) + Number(secondWindow) + Number(thirdWindow) + Number(fourthWindow)\n    ) * windowSquare;\n\n    const sumAllDoors = (\n      Number(firstDoor) + Number(secondDoor) + Number(thirdDoor) + Number(fourthDoor)\n    ) * doorSquare;\n\n    const squareTotal = (\n      (wallOne + wallTwo + wallThree + wallFour) - (sumAllWindows + sumAllDoors)\n    ).toFixed(2);\n\n    finalAnswer(squareTotal);    \n  }, []);\n\n  const VerifyTotalCans = (squareTotal) => {\n    const totalCans = [];\n    let totalPaint = squareTotal / 5;\n\n    paintCansSize.forEach((tin) => { // HOF para definir tamanhos de latas\n      if (tin < totalPaint) {\n        totalPaint -= tin;\n        totalCans.push(tin);\n      }\n      return null;\n    });\n    \n    if (totalPaint > 0) { // verificação se ainda existem partes sem pintar\n      totalCans.push(0.5);\n    }\n    return totalCans;\n  };\n\n  const VerifyQuantity = (allCans) => {\n    const count = {};\n\n    allCans.forEach((tin) => {\n      if (count[tin]) {\n        count[tin] += 1;\n        return;\n      }\n      count[tin] = 1; \n    });\n\n    return count;\n  };\n\n  const finalAnswer = (squareTotal) => {\n    setTotalSquare(squareTotal); // seta a informação para mostrar na tela;\n    const totalPaint = VerifyTotalCans(squareTotal);\n\n    const separatedCans = VerifyQuantity(totalPaint);\n    const keys = Object.entries(separatedCans);\n    setAllCans(keys);\n  };\n\n  return (\n    <section className=\"results-container page-container\">\n      <div className=\"results\">\n        <h1>Olá {name}</h1>\n        <h1>Você precisa de</h1>\n        {allCans.map((tin, index) => {\n          if (tin[1] === 1) {\n            return <h2 key={ `${tin[0]}-${index}` }>{tin[1]} lata de {tin[0]}l</h2>\n          }\n          return <h2 key={ `${tin[0]}-${index}` }>{tin[1]} latas de {tin[0]}l</h2>\n        })}\n        <h1>para colorir {totalSquare}m².</h1>\n        <div className=\"buy-button\">\n          <button\n            type=\"buton\"\n            onClick={ () => navigate('/contato') }\n          >\n            COMPRAR\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default ResultPage;\n"]},"metadata":{},"sourceType":"module"}