{"ast":null,"code":"const maximum = 150000;\nconst minimun = 10000;\nconst maximumAlert = 'A parede n達o pode ter mais que 15 metros quadrados.';\nconst minimumAlert = 'A parede n達o pode ter menos que 1 metro quadrado.';\n\nconst verifyFirstWallMesures = (heightOne, widthtOne, navigate) => {\n  const firstWall = Math.ceil(Number(heightOne) * Number(widthtOne));\n\n  if (firstWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/firstWall');\n  }\n\n  if (firstWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/firstWall');\n  }\n\n  return navigate('/secondWall');\n};\n\nconst verifySecondWallMesures = (heightTwo, widthtTwo, navigate) => {\n  const secondWall = Math.ceil(Number(heightTwo) * Number(widthtTwo));\n\n  if (secondWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/secondWall');\n  }\n\n  if (secondWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/secondWall');\n  }\n\n  return navigate('/thirdWall');\n};\n\nconst verifyThirdWallMesures = (heightThree, widthtThree, navigate) => {\n  const thirdWall = Math.ceil(Number(heightThree) * Number(widthtThree));\n\n  if (thirdWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/thirdWall');\n  }\n\n  if (thirdWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/thirdWall');\n  }\n\n  return navigate('/fourthWall');\n};\n\nconst verifyFourthWallMesures = (heightFour, widthtFour, navigate) => {\n  const fourthWall = Math.ceil(Number(heightFour) * Number(widthtFour));\n\n  if (fourthWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/fourthWall');\n  }\n\n  if (fourthWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/fourthWall');\n  }\n};\n\nexport { verifyFirstWallMesures, verifySecondWallMesures, verifyThirdWallMesures, verifyFourthWallMesures };","map":{"version":3,"sources":["/home/cae/digitalRepuclic/app-digital-republic/digital-republic/src/Helpers/verifyMesures.jsx"],"names":["maximum","minimun","maximumAlert","minimumAlert","verifyFirstWallMesures","heightOne","widthtOne","navigate","firstWall","Math","ceil","Number","alert","verifySecondWallMesures","heightTwo","widthtTwo","secondWall","verifyThirdWallMesures","heightThree","widthtThree","thirdWall","verifyFourthWallMesures","heightFour","widthtFour","fourthWall"],"mappings":"AAAA,MAAMA,OAAO,GAAG,MAAhB;AACA,MAAMC,OAAO,GAAG,KAAhB;AACA,MAAMC,YAAY,GAAG,qDAArB;AACA,MAAMC,YAAY,GAAG,mDAArB;;AAEA,MAAMC,sBAAsB,GAAG,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,QAAvB,KAAoC;AACjE,QAAMC,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUC,MAAM,CAACN,SAAD,CAAN,GAAoBM,MAAM,CAACL,SAAD,CAApC,CAAlB;;AACA,MAAIE,SAAS,GAAGR,OAAhB,EAAyB;AACvBY,IAAAA,KAAK,CAACV,YAAD,CAAL;AACA,WAAOK,QAAQ,CAAC,YAAD,CAAf;AACD;;AACD,MAAIC,SAAS,GAAGP,OAAhB,EAAyB;AACvBW,IAAAA,KAAK,CAACT,YAAD,CAAL;AACA,WAAOI,QAAQ,CAAC,YAAD,CAAf;AACD;;AACD,SAAOA,QAAQ,CAAC,aAAD,CAAf;AACD,CAXD;;AAaA,MAAMM,uBAAuB,GAAG,CAACC,SAAD,EAAYC,SAAZ,EAAuBR,QAAvB,KAAoC;AAClE,QAAMS,UAAU,GAAGP,IAAI,CAACC,IAAL,CAAUC,MAAM,CAACG,SAAD,CAAN,GAAoBH,MAAM,CAACI,SAAD,CAApC,CAAnB;;AACA,MAAIC,UAAU,GAAGhB,OAAjB,EAA0B;AACxBY,IAAAA,KAAK,CAACV,YAAD,CAAL;AACA,WAAOK,QAAQ,CAAC,aAAD,CAAf;AACD;;AACD,MAAIS,UAAU,GAAGf,OAAjB,EAA0B;AACxBW,IAAAA,KAAK,CAACT,YAAD,CAAL;AACA,WAAOI,QAAQ,CAAC,aAAD,CAAf;AACD;;AAED,SAAOA,QAAQ,CAAC,YAAD,CAAf;AACD,CAZD;;AAcA,MAAMU,sBAAsB,GAAG,CAACC,WAAD,EAAcC,WAAd,EAA2BZ,QAA3B,KAAwC;AACrE,QAAMa,SAAS,GAAGX,IAAI,CAACC,IAAL,CAAUC,MAAM,CAACO,WAAD,CAAN,GAAsBP,MAAM,CAACQ,WAAD,CAAtC,CAAlB;;AACA,MAAIC,SAAS,GAAGpB,OAAhB,EAAyB;AACvBY,IAAAA,KAAK,CAACV,YAAD,CAAL;AACA,WAAOK,QAAQ,CAAC,YAAD,CAAf;AACD;;AACD,MAAIa,SAAS,GAAGnB,OAAhB,EAAyB;AACvBW,IAAAA,KAAK,CAACT,YAAD,CAAL;AACA,WAAOI,QAAQ,CAAC,YAAD,CAAf;AACD;;AAED,SAAOA,QAAQ,CAAC,aAAD,CAAf;AACD,CAZD;;AAcA,MAAMc,uBAAuB,GAAG,CAACC,UAAD,EAAaC,UAAb,EAAyBhB,QAAzB,KAAsC;AACpE,QAAMiB,UAAU,GAAGf,IAAI,CAACC,IAAL,CAAUC,MAAM,CAACW,UAAD,CAAN,GAAqBX,MAAM,CAACY,UAAD,CAArC,CAAnB;;AACA,MAAIC,UAAU,GAAGxB,OAAjB,EAA0B;AACxBY,IAAAA,KAAK,CAACV,YAAD,CAAL;AACA,WAAOK,QAAQ,CAAC,aAAD,CAAf;AACD;;AACD,MAAIiB,UAAU,GAAGvB,OAAjB,EAA0B;AACxBW,IAAAA,KAAK,CAACT,YAAD,CAAL;AACA,WAAOI,QAAQ,CAAC,aAAD,CAAf;AACD;AACF,CAVD;;AAaA,SACEH,sBADF,EAEES,uBAFF,EAGEI,sBAHF,EAIEI,uBAJF","sourcesContent":["const maximum = 150000;\nconst minimun = 10000;\nconst maximumAlert = 'A parede n達o pode ter mais que 15 metros quadrados.'\nconst minimumAlert = 'A parede n達o pode ter menos que 1 metro quadrado.'\n\nconst verifyFirstWallMesures = (heightOne, widthtOne, navigate) => {\n  const firstWall = Math.ceil(Number(heightOne) * Number(widthtOne));\n  if (firstWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/firstWall');\n  }\n  if (firstWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/firstWall');\n  }\n  return navigate('/secondWall');\n};\n\nconst verifySecondWallMesures = (heightTwo, widthtTwo, navigate) => {\n  const secondWall = Math.ceil(Number(heightTwo) * Number(widthtTwo));\n  if (secondWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/secondWall');\n  }\n  if (secondWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/secondWall');\n  }\n\n  return navigate('/thirdWall');\n};\n\nconst verifyThirdWallMesures = (heightThree, widthtThree, navigate) => {\n  const thirdWall = Math.ceil(Number(heightThree) * Number(widthtThree));\n  if (thirdWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/thirdWall');\n  }\n  if (thirdWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/thirdWall');\n  }\n\n  return navigate('/fourthWall');\n};\n\nconst verifyFourthWallMesures = (heightFour, widthtFour, navigate) => {\n  const fourthWall = Math.ceil(Number(heightFour) * Number(widthtFour));\n  if (fourthWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/fourthWall');\n  }\n  if (fourthWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/fourthWall');\n  }\n};\n\n\nexport {\n  verifyFirstWallMesures,\n  verifySecondWallMesures,\n  verifyThirdWallMesures,\n  verifyFourthWallMesures,\n};\n"]},"metadata":{},"sourceType":"module"}