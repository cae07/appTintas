{"ast":null,"code":"var _jsxFileName = \"/home/cae/appTintas/src/Components/NextButton.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport myContext from '../Context/myContext';\nimport { VerifyFirstWallMesures, VerifySecondWallMesures, VerifyThirdWallMesures, VerifyFourthWallMesures } from '../Helpers/VerifyMesures';\nimport '../CSS/forms.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction NextButton() {\n  _s();\n\n  const {\n    heightOne,\n    heightTwo,\n    heightThree,\n    heightFour,\n    widthtOne,\n    widthtTwo,\n    widthtThree,\n    widthtFour,\n    firstWindow,\n    secondWindow,\n    thirdWindow,\n    fourthWindow,\n    firstDoor,\n    secondDoor,\n    thirdDoor,\n    fourthDoor,\n    setModal,\n    setTextModal\n  } = useContext(myContext);\n  const navigate = useNavigate();\n  const {\n    pathname\n  } = useLocation();\n  const maximumAlert = 'A parede não pode ter mais que 15 metros quadrados.';\n  const minimumAlert = 'A parede não pode ter menos que 1 metro quadrado.';\n  const errorDWAlert = 'O total de área das portas e janelas deve ser no máximo 50% da área de parede';\n  const errorWallSize = 'A altura da parede que possui portas deve ser de no mínimo 220cm.';\n\n  const verifyValidations = error => {\n    switch (error) {\n      case 'maximumAlert':\n        setTextModal(maximumAlert);\n        setModal(true);\n        break;\n\n      case 'minimumAlert':\n        setTextModal(minimumAlert);\n        setModal(true);\n        break;\n\n      case 'errorDWAlert':\n        setTextModal(errorDWAlert);\n        setModal(true);\n        break;\n\n      case 'errorWallSize':\n        setTextModal(errorWallSize);\n        setModal(true);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleClick = () => {\n    switch (pathname) {\n      case '/':\n        navigate('/firstWall');\n        break;\n\n      case '/firstWall':\n        const firstValidations = VerifyFirstWallMesures(heightOne, widthtOne, firstWindow, firstDoor, navigate);\n        if (firstValidations) return verifyValidations(firstValidations);\n        break;\n\n      case '/secondWall':\n        const secondValidations = VerifySecondWallMesures(heightTwo, widthtTwo, secondWindow, secondDoor, navigate);\n        if (secondValidations) return verifyValidations(secondValidations);\n        break;\n\n      case '/thirdWall':\n        const thirdValidations = VerifyThirdWallMesures(heightThree, widthtThree, thirdWindow, thirdDoor, navigate);\n        if (thirdValidations) return verifyValidations(thirdValidations);\n        break;\n\n      case '/fourthWall':\n        const fourthValidations = VerifyFourthWallMesures(heightFour, widthtFour, fourthWindow, fourthDoor, navigate);\n        if (fourthValidations) return verifyValidations(fourthValidations);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    type: \"button\",\n    onClick: handleClick,\n    className: \"form-buttons\",\n    children: \"pr\\xF3ximo\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n\n_s(NextButton, \"0Zb0uHOTbdWtyn9AI6rOTVCk8GU=\", false, function () {\n  return [useNavigate, useLocation];\n});\n\n_c = NextButton;\nexport default NextButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"NextButton\");","map":{"version":3,"sources":["/home/cae/appTintas/src/Components/NextButton.jsx"],"names":["React","useContext","useNavigate","useLocation","myContext","VerifyFirstWallMesures","VerifySecondWallMesures","VerifyThirdWallMesures","VerifyFourthWallMesures","NextButton","heightOne","heightTwo","heightThree","heightFour","widthtOne","widthtTwo","widthtThree","widthtFour","firstWindow","secondWindow","thirdWindow","fourthWindow","firstDoor","secondDoor","thirdDoor","fourthDoor","setModal","setTextModal","navigate","pathname","maximumAlert","minimumAlert","errorDWAlert","errorWallSize","verifyValidations","error","handleClick","firstValidations","secondValidations","thirdValidations","fourthValidations"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport myContext from '../Context/myContext';\nimport {\n  VerifyFirstWallMesures,\n  VerifySecondWallMesures,\n  VerifyThirdWallMesures,\n  VerifyFourthWallMesures,\n} from '../Helpers/VerifyMesures';\nimport '../CSS/forms.css';\n\nfunction NextButton() {\n  const {\n    heightOne,\n    heightTwo,\n    heightThree,\n    heightFour,\n    widthtOne,\n    widthtTwo,\n    widthtThree,\n    widthtFour,\n    firstWindow,\n    secondWindow,\n    thirdWindow,\n    fourthWindow,\n    firstDoor,\n    secondDoor,\n    thirdDoor,\n    fourthDoor,\n    setModal,\n    setTextModal,\n  } = useContext(myContext);\n\n  const navigate = useNavigate();\n  const { pathname } = useLocation();\n  const maximumAlert = 'A parede não pode ter mais que 15 metros quadrados.';\n  const minimumAlert = 'A parede não pode ter menos que 1 metro quadrado.';\n  const errorDWAlert = 'O total de área das portas e janelas deve ser no máximo 50% da área de parede';\n  const errorWallSize = 'A altura da parede que possui portas deve ser de no mínimo 220cm.'\n\n  const verifyValidations = (error) => {\n    switch (error) {\n      case 'maximumAlert':\n        setTextModal(maximumAlert);\n        setModal(true);\n        break;\n\n      case 'minimumAlert':\n        setTextModal(minimumAlert);\n        setModal(true);    \n        break;\n\n      case 'errorDWAlert':\n        setTextModal(errorDWAlert);\n        setModal(true);\n        break;\n    \n      case 'errorWallSize':\n        setTextModal(errorWallSize);\n        setModal(true);\n        break;\n    \n      default:\n        break;\n    }\n  };\n\n  const handleClick = () => {\n    switch (pathname) {\n      case '/':\n        navigate('/firstWall');\n        break;\n      case '/firstWall':\n        const firstValidations = VerifyFirstWallMesures(\n          heightOne, widthtOne, firstWindow, firstDoor, navigate\n        );\n        if (firstValidations) return verifyValidations(firstValidations);\n        break;\n      case '/secondWall':\n        const secondValidations = VerifySecondWallMesures(\n          heightTwo, widthtTwo, secondWindow, secondDoor, navigate\n        );\n        if (secondValidations) return verifyValidations(secondValidations);\n        break;\n      case '/thirdWall':\n        const thirdValidations = VerifyThirdWallMesures(\n          heightThree, widthtThree, thirdWindow, thirdDoor, navigate\n        );\n        if (thirdValidations) return verifyValidations(thirdValidations);\n        break;\n      case '/fourthWall':\n        const fourthValidations = VerifyFourthWallMesures(\n          heightFour, widthtFour, fourthWindow, fourthDoor, navigate\n        );\n        if (fourthValidations) return verifyValidations(fourthValidations);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <button\n      type=\"button\"\n      onClick={ handleClick }\n      className=\"form-buttons\"\n    >\n      próximo\n    </button>\n  );\n}\n\nexport default NextButton;\n"]},"metadata":{},"sourceType":"module"}