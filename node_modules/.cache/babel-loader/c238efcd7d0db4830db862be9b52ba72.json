{"ast":null,"code":"// Arquivo para funçoes de verificação de tamanho das paredes\nimport { VerifyFirstDoorWindow, VerifySecondDoorWindow, VerifyThirdDoorWindow, VerifyFourthDoorWindow } from './VerifyDoorsAndWindows';\nconst maximum = 150000;\nconst minimun = 10000;\nconst maximumAlert = 'A parede não pode ter mais que 15 metros quadrados.';\nconst minimumAlert = 'A parede não pode ter menos que 1 metro quadrado.';\n\nconst verifyFirstWallMesures = (heightOne, widthtOne, firstWindow, firstDoor, navigate) => {\n  const firstWall = Math.ceil(Number(heightOne) * Number(widthtOne));\n\n  if (firstWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/firstWall');\n  }\n\n  if (firstWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/firstWall');\n  }\n\n  VerifyFirstDoorWindow(heightOne, widthtOne, firstWindow, firstDoor, navigate);\n};\n\nconst verifySecondWallMesures = (heightTwo, widthtTwo, secondWindow, secondDoor, navigate) => {\n  const secondWall = Math.ceil(Number(heightTwo) * Number(widthtTwo));\n\n  if (secondWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/secondWall');\n  }\n\n  if (secondWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/secondWall');\n  }\n\n  VerifySecondDoorWindow(heightTwo, widthtTwo, secondWindow, secondDoor, navigate);\n};\n\nconst verifyThirdWallMesures = (heightThree, widthtThree, thirdWindow, thirdDoor, navigate) => {\n  const thirdWall = Math.ceil(Number(heightThree) * Number(widthtThree));\n\n  if (thirdWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/thirdWall');\n  }\n\n  if (thirdWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/thirdWall');\n  }\n\n  VerifyThirdDoorWindow(heightThree, widthtThree, thirdWindow, thirdDoor, navigate);\n};\n\nconst verifyFourthWallMesures = (heightFour, widthtFour, fourthWindow, fourthDoor, navigate) => {\n  const fourthWall = Math.ceil(Number(heightFour) * Number(widthtFour));\n\n  if (fourthWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/fourthWall');\n  }\n\n  if (fourthWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/fourthWall');\n  }\n\n  VerifyFourthDoorWindow(heightFour, widthtFour, fourthWindow, fourthDoor, navigate);\n};\n\nexport { verifyFirstWallMesures, verifySecondWallMesures, verifyThirdWallMesures, verifyFourthWallMesures };","map":{"version":3,"sources":["/home/cae/digitalRepuclic/app-digital-republic/digital-republic/src/Helpers/VerifyMesures.jsx"],"names":["VerifyFirstDoorWindow","VerifySecondDoorWindow","VerifyThirdDoorWindow","VerifyFourthDoorWindow","maximum","minimun","maximumAlert","minimumAlert","verifyFirstWallMesures","heightOne","widthtOne","firstWindow","firstDoor","navigate","firstWall","Math","ceil","Number","alert","verifySecondWallMesures","heightTwo","widthtTwo","secondWindow","secondDoor","secondWall","verifyThirdWallMesures","heightThree","widthtThree","thirdWindow","thirdDoor","thirdWall","verifyFourthWallMesures","heightFour","widthtFour","fourthWindow","fourthDoor","fourthWall"],"mappings":"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","sourcesContent":["// Arquivo para funçoes de verificação de tamanho das paredes\nimport {\n  VerifyFirstDoorWindow,\n  VerifySecondDoorWindow,\n  VerifyThirdDoorWindow,\n  VerifyFourthDoorWindow,\n} from './VerifyDoorsAndWindows';\n\nconst maximum = 150000;\nconst minimun = 10000;\nconst maximumAlert = 'A parede não pode ter mais que 15 metros quadrados.'\nconst minimumAlert = 'A parede não pode ter menos que 1 metro quadrado.'\n\nconst verifyFirstWallMesures = (heightOne, widthtOne, firstWindow, firstDoor, navigate) => {\n  const firstWall = Math.ceil(Number(heightOne) * Number(widthtOne));\n  if (firstWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/firstWall');\n  }\n  if (firstWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/firstWall');\n  }\n\n  VerifyFirstDoorWindow(heightOne, widthtOne, firstWindow, firstDoor, navigate);\n};\n\nconst verifySecondWallMesures = (heightTwo, widthtTwo, secondWindow, secondDoor, navigate) => {\n  const secondWall = Math.ceil(Number(heightTwo) * Number(widthtTwo));\n  if (secondWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/secondWall');\n  }\n  if (secondWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/secondWall');\n  }\n\n  VerifySecondDoorWindow(heightTwo, widthtTwo, secondWindow, secondDoor, navigate);\n};\n\nconst verifyThirdWallMesures = (heightThree, widthtThree, thirdWindow, thirdDoor, navigate) => {\n  const thirdWall = Math.ceil(Number(heightThree) * Number(widthtThree));\n  if (thirdWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/thirdWall');\n  }\n  if (thirdWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/thirdWall');\n  }\n\n  VerifyThirdDoorWindow(heightThree, widthtThree, thirdWindow, thirdDoor, navigate);\n};\n\nconst verifyFourthWallMesures = (heightFour, widthtFour, fourthWindow, fourthDoor, navigate) => {\n  const fourthWall = Math.ceil(Number(heightFour) * Number(widthtFour));\n  if (fourthWall > maximum) {\n    alert(maximumAlert);\n    return navigate('/fourthWall');\n  }\n  if (fourthWall < minimun) {\n    alert(minimumAlert);\n    return navigate('/fourthWall');\n  }\n\n  VerifyFourthDoorWindow(heightFour, widthtFour, fourthWindow, fourthDoor, navigate);\n};\n\nexport {\n  verifyFirstWallMesures,\n  verifySecondWallMesures,\n  verifyThirdWallMesures,\n  verifyFourthWallMesures,\n};\n"]},"metadata":{},"sourceType":"module"}