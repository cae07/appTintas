{"ast":null,"code":"var _jsxFileName = \"/home/cae/appTintas/src/Components/NextButton.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport myContext from '../Context/myContext';\nimport { VerifyFirstWallMesures, VerifySecondWallMesures, VerifyThirdWallMesures, VerifyFourthWallMesures } from '../Helpers/VerifyMesures';\nimport '../CSS/forms.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction NextButton() {\n  _s();\n\n  const {\n    heightOne,\n    heightTwo,\n    heightThree,\n    heightFour,\n    widthtOne,\n    widthtTwo,\n    widthtThree,\n    widthtFour,\n    firstWindow,\n    secondWindow,\n    thirdWindow,\n    fourthWindow,\n    firstDoor,\n    secondDoor,\n    thirdDoor,\n    fourthDoor,\n    setModal,\n    setTextModal\n  } = useContext(myContext);\n  const navigate = useNavigate();\n  const {\n    pathname\n  } = useLocation();\n  const maximumAlert = 'A parede não pode ter mais que 15 metros quadrados.';\n  const minimumAlert = 'A parede não pode ter menos que 1 metro quadrado.';\n  const errorDWAlert = 'O total de área das portas e janelas deve ser no máximo 50% da área de parede';\n  const errorWallSize = 'A altura da parede que possui portas deve ser de no mínimo 220cm.';\n\n  const handleClick = () => {\n    switch (pathname) {\n      case '/':\n        navigate('/firstWall');\n        break;\n\n      case '/firstWall':\n        const firstValidations = VerifyFirstWallMesures(heightOne, widthtOne, firstWindow, firstDoor, navigate);\n\n        if (firstValidations === 'maximumAlert') {\n          setTextModal(maximumAlert);\n          setModal(true);\n        }\n\n        ;\n\n        if (firstValidations === 'minimumAlert') {\n          setTextModal(minimumAlert);\n          setModal(true);\n        }\n\n        ;\n\n        if (firstValidations === 'errorDWAlert') {\n          setTextModal(errorDWAlert);\n          setModal(true);\n        }\n\n        if (firstValidations === 'errorWallSize') {\n          setTextModal(errorWallSize);\n          setModal(true);\n        }\n\n        break;\n\n      case '/secondWall':\n        const secondValidations = VerifySecondWallMesures(heightTwo, widthtTwo, secondWindow, secondDoor, navigate);\n\n        if (secondValidations === 'maximumAlert') {\n          setTextModal(maximumAlert);\n          setModal(true);\n        }\n\n        ;\n\n        if (secondValidations === 'minimumAlert') {\n          setTextModal(minimumAlert);\n          setModal(true);\n        }\n\n        ;\n\n        if (secondValidations === 'errorDWAlert') {\n          setTextModal(errorDWAlert);\n          setModal(true);\n        }\n\n        if (secondValidations === 'errorWallSize') {\n          setTextModal(errorWallSize);\n          setModal(true);\n        }\n\n        break;\n\n      case '/thirdWall':\n        const thirdValidations = VerifyThirdWallMesures(heightThree, widthtThree, thirdWindow, thirdDoor, navigate);\n\n        if (thirdValidations === 'maximumAlert') {\n          setTextModal(maximumAlert);\n          setModal(true);\n        }\n\n        ;\n\n        if (thirdValidations === 'minimumAlert') {\n          setTextModal(minimumAlert);\n          setModal(true);\n        }\n\n        ;\n\n        if (thirdValidations === 'errorDWAlert') {\n          setTextModal(errorDWAlert);\n          setModal(true);\n        }\n\n        if (thirdValidations === 'errorWallSize') {\n          setTextModal(errorWallSize);\n          setModal(true);\n        }\n\n        break;\n\n      case '/fourthWall':\n        const fourthValidations = VerifyFourthWallMesures(heightFour, widthtFour, fourthWindow, fourthDoor, navigate);\n\n        if (fourthValidations === 'maximumAlert') {\n          setTextModal(maximumAlert);\n          setModal(true);\n        }\n\n        ;\n\n        if (fourthValidations === 'minimumAlert') {\n          setTextModal(minimumAlert);\n          setModal(true);\n        }\n\n        ;\n\n        if (fourthValidations === 'errorDWAlert') {\n          setTextModal(errorDWAlert);\n          setModal(true);\n        }\n\n        if (fourthValidations === 'errorWallSize') {\n          setTextModal(errorWallSize);\n          setModal(true);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    type: \"button\",\n    onClick: handleClick,\n    className: \"form-buttons\",\n    children: \"pr\\xF3ximo\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n\n_s(NextButton, \"0Zb0uHOTbdWtyn9AI6rOTVCk8GU=\", false, function () {\n  return [useNavigate, useLocation];\n});\n\n_c = NextButton;\nexport default NextButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"NextButton\");","map":{"version":3,"sources":["/home/cae/appTintas/src/Components/NextButton.jsx"],"names":["React","useContext","useNavigate","useLocation","myContext","VerifyFirstWallMesures","VerifySecondWallMesures","VerifyThirdWallMesures","VerifyFourthWallMesures","NextButton","heightOne","heightTwo","heightThree","heightFour","widthtOne","widthtTwo","widthtThree","widthtFour","firstWindow","secondWindow","thirdWindow","fourthWindow","firstDoor","secondDoor","thirdDoor","fourthDoor","setModal","setTextModal","navigate","pathname","maximumAlert","minimumAlert","errorDWAlert","errorWallSize","handleClick","firstValidations","secondValidations","thirdValidations","fourthValidations"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport myContext from '../Context/myContext';\nimport {\n  VerifyFirstWallMesures,\n  VerifySecondWallMesures,\n  VerifyThirdWallMesures,\n  VerifyFourthWallMesures,\n} from '../Helpers/VerifyMesures';\nimport '../CSS/forms.css';\n\nfunction NextButton() {\n  const {\n    heightOne,\n    heightTwo,\n    heightThree,\n    heightFour,\n    widthtOne,\n    widthtTwo,\n    widthtThree,\n    widthtFour,\n    firstWindow,\n    secondWindow,\n    thirdWindow,\n    fourthWindow,\n    firstDoor,\n    secondDoor,\n    thirdDoor,\n    fourthDoor,\n    setModal,\n    setTextModal,\n  } = useContext(myContext);\n\n  const navigate = useNavigate();\n  const { pathname } = useLocation();\n  const maximumAlert = 'A parede não pode ter mais que 15 metros quadrados.';\n  const minimumAlert = 'A parede não pode ter menos que 1 metro quadrado.';\n  const errorDWAlert = 'O total de área das portas e janelas deve ser no máximo 50% da área de parede';\n  const errorWallSize = 'A altura da parede que possui portas deve ser de no mínimo 220cm.'\n\n  const handleClick = () => {\n    switch (pathname) {\n      case '/':\n        navigate('/firstWall');\n        break;\n      case '/firstWall':\n        const firstValidations = VerifyFirstWallMesures(\n          heightOne, widthtOne, firstWindow, firstDoor, navigate\n        );\n        if (firstValidations === 'maximumAlert') {\n          setTextModal(maximumAlert);\n          setModal(true);\n        };\n        if (firstValidations === 'minimumAlert') {\n          setTextModal(minimumAlert);\n          setModal(true);\n        };\n        if (firstValidations === 'errorDWAlert') {\n          setTextModal(errorDWAlert);\n          setModal(true);\n        }\n        if (firstValidations === 'errorWallSize') {\n          setTextModal(errorWallSize);\n          setModal(true);\n        }\n        break;\n      case '/secondWall':\n        const secondValidations = VerifySecondWallMesures(\n          heightTwo, widthtTwo, secondWindow, secondDoor, navigate\n        );\n        if (secondValidations === 'maximumAlert') {\n          setTextModal(maximumAlert);\n          setModal(true);\n        };\n        if (secondValidations === 'minimumAlert') {\n          setTextModal(minimumAlert);\n          setModal(true);\n        };\n        if (secondValidations === 'errorDWAlert') {\n          setTextModal(errorDWAlert);\n          setModal(true);\n        }\n        if (secondValidations === 'errorWallSize') {\n          setTextModal(errorWallSize);\n          setModal(true);\n        }\n        break;\n      case '/thirdWall':\n        const thirdValidations = VerifyThirdWallMesures(\n          heightThree, widthtThree, thirdWindow, thirdDoor, navigate\n        );\n        if (thirdValidations === 'maximumAlert') {\n          setTextModal(maximumAlert);\n          setModal(true);\n        };\n        if (thirdValidations === 'minimumAlert') {\n          setTextModal(minimumAlert);\n          setModal(true);\n        };\n        if (thirdValidations === 'errorDWAlert') {\n          setTextModal(errorDWAlert);\n          setModal(true);\n        }\n        if (thirdValidations === 'errorWallSize') {\n          setTextModal(errorWallSize);\n          setModal(true);\n        }\n        break;\n      case '/fourthWall':\n        const fourthValidations = VerifyFourthWallMesures(\n          heightFour, widthtFour, fourthWindow, fourthDoor, navigate\n        );\n        if (fourthValidations === 'maximumAlert') {\n          setTextModal(maximumAlert);\n          setModal(true);\n        };\n        if (fourthValidations === 'minimumAlert') {\n          setTextModal(minimumAlert);\n          setModal(true);\n        };\n        if (fourthValidations === 'errorDWAlert') {\n          setTextModal(errorDWAlert);\n          setModal(true);\n        }\n        if (fourthValidations === 'errorWallSize') {\n          setTextModal(errorWallSize);\n          setModal(true);\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <button\n      type=\"button\"\n      onClick={ handleClick }\n      className=\"form-buttons\"\n    >\n      próximo\n    </button>\n  );\n}\n\nexport default NextButton;\n"]},"metadata":{},"sourceType":"module"}